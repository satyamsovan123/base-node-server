var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AppComponent.html",[0,0.426,1,0.83]],["body/components/AppComponent.html",[0,0.767,1,1.246,2,1.288,3,0.295,4,0.255,5,0.974,6,0.974,7,0.974,8,0.974,9,0.216,10,1.973,11,0.56,12,3.775,13,2.515,14,1.288,15,2.571,16,0.974,17,2.243,18,1.845,19,1.42,20,4.115,21,1.42,22,3.486,23,0.431,24,0.56,25,5.021,26,2.674,27,0.961,28,2.825,29,1.134,30,1.329,31,1.464,32,1.246,33,2.39,34,0.659,35,0.039,36,1.134,37,0.595,38,0.596,39,1.384,40,2.036,41,2.257,42,3.486,43,2.39,44,0.961,45,2.178,46,2.178,47,0.961,48,2.878,49,1.569,50,1.939,51,1.74,52,3.486,53,3.486,54,2.878,55,2.878,56,1.288,57,1.973,58,0.659,59,1.288,60,3.214,61,1.134,62,1.246,63,2.571,64,2.39,65,1.288,66,1.288,67,2.825,68,1.939,69,0.661,70,3.486,71,2.39,72,1.74,73,2.878,74,0.925,75,0.483,76,2.39,77,0.883,78,1.076,79,0.295,80,0.537,81,0.659,82,0.974,83,1.973,84,2.39,85,2.39,86,2.39,87,2.39,88,2.39,89,2.878,90,2.878,91,3.486,92,2.39,93,2.878,94,3.97,95,2.39,96,5.021,97,4.28,98,2.878,99,3.486,100,4.386,101,4.523,102,3.397,103,3.486,104,5.021,105,4.115,106,1.698,107,1.698,108,3.214,109,4.115,110,2.39,111,3.97,112,1.698,113,1.698,114,1.698,115,1.973,116,1.698,117,1.973,118,2.39,119,3.734,120,2.878,121,2.878,122,2.878,123,3.486,124,4.523,125,2.39,126,2.39,127,2.878,128,2.39,129,2.39,130,2.39,131,2.39,132,2.39,133,2.39,134,2.39,135,2.39,136,1.973,137,2.39,138,2.39,139,1.973,140,1.973,141,1.973,142,3.486,143,3.486,144,3.397,145,2.39,146,2.39,147,2.39,148,2.39,149,1.973,150,2.878,151,1.973,152,2.39,153,1.698,154,2.39,155,1.973,156,1.973,157,2.39,158,1.973,159,2.39,160,1.973,161,1.973,162,1.973,163,1.698,164,1.973,165,1.973,166,2.39,167,1.973,168,1.329,169,1.973,170,0.801,171,1.42,172,1.42,173,0.974,174,1.843,175,0.974,176,0.974,177,0.596,178,1.42,179,0.659,180,0.974,181,0.659,182,0.974,183,0.596,184,0.727,185,0.596,186,0.974,187,0.596,188,0.974,189,0.659,190,0.883,191,0.974,192,0.974,193,0.974,194,0.021,195,0.021]],["title/modules/AppModule.html",[196,1.881,197,1.503]],["body/modules/AppModule.html",[1,1.639,3,0.401,4,0.345,9,0.292,18,1.086,35,0.039,68,1.802,72,1.617,74,1.358,75,0.655,79,0.401,80,0.729,170,1.086,177,1.378,179,1.524,181,1.524,183,1.378,185,1.378,187,1.378,189,1.524,194,0.027,195,0.027,196,2.024,197,3.1,198,1.802,199,2.024,200,3.999,201,3.999,202,3.999,203,2.303,204,2.675,205,2.675,206,2.675,207,2.675,208,2.675,209,3.075,210,2.759,211,3.075,212,3.559,213,2.303,214,1.197,215,3.241,216,3.559,217,3.559,218,4.312,219,2.675,220,3.241,221,3.241,222,2.675,223,2.675,224,2.675,225,2.024,226,3.559,227,2.675,228,2.024,229,3.241,230,4.312,231,2.675,232,4.312,233,4.312,234,2.303,235,3.241,236,3.241,237,2.675,238,3.241,239,2.303,240,3.241,241,3.241,242,3.241,243,3.241]],["title/modules/AppRoutingModule.html",[196,1.881,209,1.675]],["body/modules/AppRoutingModule.html",[0,0.789,3,0.49,4,0.423,9,0.358,13,2.206,35,0.039,74,1.329,75,0.802,79,0.49,80,0.892,177,1.224,183,1.224,184,1.206,185,1.224,187,1.224,194,0.03,195,0.03,198,2.206,203,2.818,209,2.73,210,2.66,216,3.274,217,4.052,222,3.274,223,3.274,224,3.274,225,2.478,226,4.052,227,3.274,228,2.478,237,3.274,244,3.967,245,3.967,246,4.909,247,3.184,248,1.979,249,3.967,250,3.967,251,1.785,252,4.726,253,1.785,254,1.785,255,1.104,256,4.052,257,3.967,258,3.967]],["title/injectables/AuthGuard.html",[210,1.503,259,1.227]],["body/injectables/AuthGuard.html",[3,0.366,4,0.315,9,0.267,11,0.743,23,0.366,27,1.118,29,1.275,30,1.647,31,1.519,32,1.118,34,1.118,35,0.039,36,1.118,37,0.501,38,1.011,39,1.616,44,1.118,46,3.364,47,1.653,49,2.729,55,3.349,58,1.118,60,3.705,61,0.816,62,1.484,63,3.257,66,1.838,68,2.994,69,0.476,74,1.04,75,0.598,79,0.366,80,1.172,81,1.275,82,1.206,168,1.647,184,1.513,194,0.025,195,0.025,210,2.024,247,2.256,248,1.478,255,1.262,256,3.82,259,1.652,260,1.85,261,2.444,262,5.615,263,5.615,264,2.882,265,4.977,266,2.961,267,2.882,268,2.89,269,2.961,270,4.977,271,4.445,272,4.977,273,2.961,274,2.602,275,5.696,276,4.977,277,3.349,278,3.349,279,4.109,280,2.444,281,2.882,282,3.349,283,2.961,284,2.961,285,2.961,286,0.992,287,2.961,288,2.444,289,1.838,290,2.961,291,2.444,292,1.333,293,2.104,294,2.444,295,1.478]],["title/interceptors/BackendInterceptor.html",[211,1.675,296,2.14]],["body/interceptors/BackendInterceptor.html",[3,0.397,4,0.342,9,0.29,11,0.775,14,1.187,23,0.397,27,1.181,29,1.329,30,1.787,31,1.552,32,1.181,34,1.181,35,0.039,36,1.181,37,0.53,38,1.068,39,1.52,44,1.181,58,0.885,69,0.516,74,1.157,75,0.649,79,0.397,80,0.722,81,1.329,82,1.309,136,2.652,194,0.026,195,0.026,211,2.384,234,2.283,251,1.446,259,1.746,268,3.013,274,2.407,280,2.652,292,2.483,296,3.657,297,3.213,298,2.652,299,2.194,300,5.631,301,2.359,302,4.249,303,5.362,304,4.001,305,2.607,306,5.516,307,1.901,308,3.213,309,3.539,310,3.539,311,3.213,312,5.147,313,5.147,314,3.213,315,5.631,316,2.384,317,4.287,318,4.287,319,3.213,320,4.287,321,1.187,322,4.287,323,2.283,324,3.213,325,3.213,326,1.303,327,1.603,328,3.213,329,3.213,330,3.213,331,2.283,332,3.213,333,3.213,334,3.213,335,3.213,336,3.213,337,3.213,338,3.213]],["title/injectables/BackendService.html",[259,1.227,339,1.112]],["body/injectables/BackendService.html",[3,0.237,4,0.204,9,0.325,11,0.702,12,1.361,13,1.642,23,0.237,24,0.474,27,0.814,29,0.993,32,1.406,34,1.205,35,0.039,36,1.205,37,0.631,38,1.09,39,1.569,44,1.546,47,1.116,49,1.329,50,2.57,54,3.343,58,1.461,61,0.814,62,0.814,69,0.773,74,1.083,75,0.387,79,0.237,80,0.983,81,1.205,82,0.78,184,1.231,194,0.018,195,0.018,197,0.956,214,1.496,234,1.361,253,1.969,254,1.969,255,1.313,259,1.203,260,1.197,264,2.877,268,3.254,274,2.306,299,2.257,301,2.346,302,3.814,304,3.283,305,2.08,307,2.035,316,2.252,323,3.283,326,1.405,327,1.474,339,1.091,340,1.582,341,2.021,342,2.438,343,1.582,344,2.953,345,2.953,346,2.975,347,2.975,348,2.438,349,3.343,350,2.438,351,2.438,352,2.877,353,2.438,354,1.916,355,4.972,356,1.916,357,2.953,358,2.877,359,1.916,360,4.972,361,2.953,362,2.438,363,3.814,364,2.438,365,2.438,366,2.438,367,2.953,368,2.953,369,2.438,370,2.693,371,4.3,372,1.916,373,1.329,374,2.877,375,2.438,376,2.432,377,1.916,378,2.438,379,1.916,380,4.049,381,2.438,382,2.438,383,4.621,384,4.621,385,3.814,386,3.814,387,4.621,388,4.621,389,4.621,390,3.283,391,3.814,392,3.814,393,3.814,394,5.101,395,4.621,396,1.916,397,2.438,398,1.916,399,2.953,400,1.474,401,4.049,402,1.916,403,4.049,404,2.732,405,1.916,406,1.916,407,1.582,408,1.916,409,1.916,410,1.916,411,1.361,412,1.916,413,1.582,414,1.582,415,2.953,416,3.604,417,1.916,418,1.916,419,1.916,420,1.916,421,1.916,422,2.953,423,1.916,424,1.916,425,1.582,426,1.582]],["title/injectables/CommonService.html",[31,0.83,259,1.227]],["body/injectables/CommonService.html",[3,0.149,4,0.129,9,0.238,11,0.698,12,0.859,13,1.466,23,0.149,24,0.327,27,0.852,29,0.726,31,0.852,32,1.43,34,1.151,35,0.039,36,1.355,37,0.634,38,1.041,39,1.601,40,2.439,41,2.085,44,1.521,46,2.336,47,1.414,48,2.176,49,2.13,50,0.672,51,1.315,56,1.381,57,4.125,58,1.304,59,1.543,60,2.197,61,1.331,62,1.304,63,1.271,65,1.381,66,1.66,67,1.932,68,1.466,69,0.931,72,0.603,73,0.997,74,0.895,75,0.244,77,0.446,78,0.544,79,0.149,80,0.593,81,1.198,82,0.492,83,2.176,168,1.132,194,0.013,195,0.013,197,0.603,214,0.973,248,0.603,251,1.684,259,0.829,260,0.755,264,1.446,267,3.646,268,2.336,271,1.68,274,2.59,277,0.997,278,0.997,279,2.176,281,2.197,286,1.901,289,1.543,293,2.197,299,0.752,305,2.609,307,1.66,309,4.369,310,4.369,321,0.446,326,0.94,339,1.606,342,1.68,343,0.997,352,0.859,369,3.088,370,2.13,373,1.791,385,0.997,386,0.997,391,3.906,392,1.68,393,0.997,400,1.866,404,0.755,407,0.997,413,0.997,414,0.997,425,1.68,426,2.849,427,0.997,428,1.68,429,2.035,430,2.035,431,2.035,432,4.125,433,3.092,434,2.035,435,2.035,436,3.987,437,2.035,438,2.035,439,2.035,440,2.035,441,1.208,442,2.969,443,1.208,444,1.932,445,2.035,446,2.035,447,2.035,448,1.208,449,3.74,450,1.957,451,2.035,452,2.035,453,2.035,454,2.636,455,2.553,456,3.451,457,3.74,458,3.451,459,2.035,460,1.208,461,3.906,462,3.284,463,2.09,464,2.636,465,3.906,466,2.485,467,2.035,468,1.208,469,1.957,470,2.035,471,1.553,472,3.092,473,1.446,474,2.035,475,2.035,476,3.451,477,3.74,478,1.208,479,1.208,480,1.208,481,1.208,482,2.035,483,2.035,484,1.208,485,3.092,486,2.636,487,2.035,488,1.208,489,2.035,490,3.451,491,2.035,492,2.553,493,1.208,494,1.208,495,1.208,496,2.035,497,1.208,498,2.454,499,2.035,500,1.208,501,1.208,502,1.208,503,4.918,504,2.035,505,1.208,506,4.732,507,1.524,508,2.035,509,1.208,510,1.208,511,2.035,512,2.035,513,1.208,514,1.208,515,2.035,516,2.035,517,1.208,518,1.208,519,1.208,520,1.208,521,1.208,522,1.208,523,1.208,524,1.208,525,1.208,526,0.672,527,1.208,528,1.208,529,0.997,530,0.544,531,1.208,532,2.176,533,1.208,534,1.208,535,1.208,536,1.208,537,1.208,538,0.997,539,1.208,540,1.208,541,1.208,542,1.208,543,0.672,544,1.208,545,2.035,546,1.446,547,1.208,548,1.208,549,1.208,550,1.208,551,3.74,552,0.997,553,0.997,554,2.636,555,1.208,556,1.208,557,1.208,558,1.208,559,1.208,560,1.208,561,2.035,562,1.208,563,1.68,564,2.636,565,2.035,566,1.208,567,1.208,568,1.208,569,2.035,570,1.446,571,1.446,572,3.451,573,1.208,574,0.997,575,3.451,576,0.859,577,1.208,578,2.636,579,1.208,580,1.208,581,0.859,582,1.208,583,1.208,584,1.208]],["title/interfaces/DecodedJWT.html",[466,1.881,585,0.916]],["body/interfaces/DecodedJWT.html",[3,0.522,4,0.45,9,0.381,11,0.678,23,0.522,24,0.819,35,0.038,37,0.677,69,0.88,79,0.522,194,0.031,195,0.031,286,1.984,358,4.207,461,4.944,462,3.485,466,3.186,552,4.698,553,4.698,585,1.551,586,2.107,587,3.485,588,5.1,589,4.698,590,5.1,591,5.1]],["title/components/GetDataComponent.html",[0,0.426,177,0.751]],["body/components/GetDataComponent.html",[0,0.715,1,0.442,2,0.948,3,0.198,4,0.171,5,0.653,6,0.653,7,0.653,8,0.653,9,0.145,11,0.515,14,0.948,16,0.653,17,2.015,18,1.658,19,1.045,21,1.045,23,0.317,24,0.412,26,1.427,27,0.707,29,1.011,31,1.288,32,1.288,34,0.707,35,0.039,36,1.011,37,0.611,38,0.64,39,1.418,40,1.155,41,2.138,44,1.288,47,1.329,49,1.445,51,0.8,56,0.592,58,1.011,59,1.185,61,1.106,62,0.884,65,1.827,66,1.827,67,2.292,69,0.722,74,0.963,75,0.324,77,0.592,78,0.721,79,0.198,80,0.36,81,0.884,94,1.323,97,1.323,98,1.323,100,3.314,102,1.323,106,1.823,107,2.28,108,1.138,112,1.138,113,1.138,114,1.138,116,1.138,119,1.323,120,1.323,121,1.323,122,1.323,127,1.323,139,1.323,140,1.323,141,1.323,144,1.323,149,1.323,150,2.118,151,1.323,153,2.28,156,2.649,158,1.323,160,1.323,161,1.323,162,1.323,163,2.28,164,1.323,165,1.323,167,2.118,168,2.502,169,1.323,170,0.537,171,1.045,172,1.045,173,0.653,174,1.495,175,0.653,176,0.653,177,0.915,178,1.045,179,0.442,180,0.653,181,0.442,182,0.653,183,0.399,184,0.487,185,0.399,186,0.653,187,0.399,188,0.653,189,0.442,190,0.592,191,0.653,192,0.653,193,0.653,194,0.016,195,0.016,213,1.823,214,1.185,225,3.012,251,0.721,255,1.323,274,2.406,286,0.86,288,1.323,289,1.781,292,0.721,295,0.8,299,1.9,301,2.015,305,1.445,307,1.956,321,0.592,326,0.976,339,1.662,341,1.28,348,3.714,358,2.607,362,2.649,363,3.029,364,3.029,365,2.118,366,2.118,370,1.445,373,1.445,400,0.8,450,1.652,455,1.323,463,1.745,465,2.118,469,1.155,471,1.155,498,1.831,507,1.904,526,1.427,530,1.928,543,0.891,563,1.323,581,2.607,592,3.98,593,1.138,594,1.602,595,2.649,596,2.118,597,4.015,598,2.607,599,2.566,600,1.831,601,0.891,602,1.323,603,2.566,604,4.586,605,1.602,606,4.675,607,3.67,608,3.67,609,3.67,610,2.566,611,2.566,612,3.21,613,2.566,614,2.566,615,3.21,616,2.566,617,2.566,618,1.602,619,1.602,620,1.602,621,1.602,622,1.602,623,1.603,624,1.603,625,1.427,626,1.603,627,1.603,628,1.823,629,2.118,630,2.649,631,3.426,632,2.566,633,4.015,634,2.566,635,2.118,636,1.602,637,1.28,638,1.28,639,1.28,640,1.323,641,1.602,642,2.292,643,1.602,644,2.566,645,1.602,646,1.602,647,0.891,648,0.8,649,3.21,650,3.21,651,1.602,652,1.001,653,1.28,654,1.001,655,1.602,656,1.001,657,1.001,658,1.602,659,2.566,660,1.602,661,2.005,662,1.138,663,2.566,664,1.602,665,1.602,666,1.602,667,1.602,668,1.602,669,1.602,670,1.602,671,1.602,672,1.602,673,2.566,674,1.602,675,3.67,676,1.602,677,1.323,678,1.323,679,1.323,680,1.603,681,1.323,682,1.138,683,1.001,684,1.602,685,1.602,686,1.602,687,1.602,688,1.602,689,0.8,690,2.566,691,2.566,692,2.566,693,1.603,694,2.566,695,1.602,696,1.602,697,1.602,698,1.602,699,1.602,700,1.323,701,2.118,702,1.602,703,1.602,704,1.323,705,1.323,706,1.602,707,1.602,708,1.602,709,1.602,710,1.602,711,1.602,712,1.602,713,1.602,714,1.602,715,1.602,716,1.602,717,2.566,718,1.602,719,2.566,720,1.602,721,1.602,722,1.602,723,1.602,724,2.566,725,1.602,726,1.602,727,1.602]],["title/components/NavbarComponent.html",[0,0.426,179,0.83]],["body/components/NavbarComponent.html",[0,0.788,1,0.584,2,1.178,3,0.262,4,0.226,5,0.864,6,0.864,7,0.864,8,0.864,9,0.191,11,0.512,14,1.178,15,2.395,16,0.864,17,2.179,18,1.793,19,1.299,21,1.299,23,0.262,24,0.512,27,0.879,28,2.665,29,1.057,30,1.179,31,1.374,32,1.374,34,0.584,35,0.039,36,1.447,37,0.566,38,0.528,39,1.517,40,1.92,44,1.414,45,1.992,46,2.665,47,1.474,49,2.53,56,1.178,58,1.176,59,1.842,61,0.879,62,0.584,65,1.895,66,1.775,69,0.772,74,0.862,75,0.428,79,0.262,80,0.477,81,0.584,82,0.864,93,1.75,106,1.506,107,2.266,108,1.506,111,1.75,112,1.506,113,1.506,114,1.506,115,1.75,116,1.506,117,1.75,153,1.506,163,1.506,168,2.974,170,0.71,171,1.299,172,1.299,173,0.864,174,1.738,175,0.864,176,0.864,177,0.528,178,1.299,179,1.176,180,0.864,181,0.584,182,0.864,183,0.528,184,1.391,185,0.528,186,0.864,187,0.528,188,0.864,189,0.584,190,0.783,191,0.864,192,0.864,193,0.864,194,0.02,195,0.02,214,1.895,255,1.238,267,2.266,281,2.266,282,2.633,286,1.069,289,1.576,291,1.75,292,0.954,293,3.25,294,2.633,295,1.058,307,1.178,321,0.783,326,1.737,327,2.129,352,3.25,450,1.436,463,1.738,469,1.436,471,1.436,492,3.968,507,1.738,530,1.92,538,1.75,594,1.914,598,2.778,600,2.129,631,3.646,635,2.633,637,1.592,638,1.592,639,1.592,648,1.058,653,1.592,682,1.506,689,1.058,700,1.75,701,1.75,704,1.75,705,1.75,728,1.75,729,3.19,730,3.19,731,3.19,732,3.835,733,3.19,734,4.266,735,2.12,736,2.12,737,3.19,738,2.12,739,2.12,740,2.12,741,2.12,742,2.12,743,2.12,744,2.12,745,3.19,746,3.19,747,3.19,748,3.19,749,3.19,750,2.12,751,2.12,752,3.19,753,3.19,754,3.19,755,3.835,756,2.12,757,2.12,758,2.12,759,2.12,760,2.12]],["title/components/NotificationComponent.html",[0,0.426,181,0.83]],["body/components/NotificationComponent.html",[0,0.829,1,0.774,2,1.444,3,0.347,4,0.299,5,1.144,6,1.144,7,1.144,8,1.144,9,0.253,11,0.628,14,1.444,15,2.811,16,1.144,17,2.322,18,1.911,19,1.593,21,1.593,23,0.347,24,0.628,27,1.078,28,3.04,29,1.24,30,1.562,31,1.498,32,1.41,34,0.774,35,0.039,36,1.24,37,0.632,38,0.7,39,1.551,44,1.078,45,2.443,56,1.797,58,1.078,59,1.662,61,1.078,62,0.774,65,1.444,66,1.956,67,3.04,69,0.822,74,1.094,75,0.567,77,1.037,78,1.264,79,0.347,80,0.631,81,0.774,82,1.144,170,0.941,171,1.593,172,1.593,173,1.144,174,1.982,175,1.144,176,1.144,177,0.7,178,1.593,179,0.774,180,1.144,181,1.341,182,1.144,183,0.7,184,0.854,185,0.7,186,1.144,187,0.7,188,1.144,189,0.774,190,1.037,191,1.144,192,1.144,193,1.144,194,0.024,195,0.024,321,1.037,432,3.228,450,1.76,463,1.982,498,2.973,507,1.982,530,2.19,532,3.228,589,2.318,594,2.245,598,2.922,600,2.428,625,1.562,637,1.952,638,1.952,639,1.952,648,1.401,653,1.952,689,1.401,761,2.318,762,4.5,763,3.911,764,2.808,765,2.808,766,2.808,767,3.911,768,2.808,769,2.808,770,3.911,771,2.808,772,3.911,773,2.808,774,2.808,775,2.808]],["title/components/PostDataComponent.html",[0,0.426,183,0.751]],["body/components/PostDataComponent.html",[0,0.773,1,0.595,2,1.194,3,0.267,4,0.23,5,0.879,6,0.879,7,0.879,8,0.879,9,0.195,11,0.519,14,1.194,16,0.879,17,2.189,18,1.801,19,1.317,21,1.317,23,0.267,24,0.519,26,2.691,27,0.891,29,1.186,31,1.422,32,1.334,34,0.595,35,0.039,36,1.068,37,0.638,38,0.538,39,1.481,41,2.415,44,1.186,47,1.383,49,1.745,50,1.798,56,0.797,58,0.891,59,1.194,61,1.186,62,0.891,65,1.985,66,1.985,69,0.863,74,1.088,75,0.436,77,0.797,78,0.972,79,0.267,80,0.485,81,0.891,170,0.724,171,1.317,172,1.317,173,0.879,174,1.754,175,0.879,176,0.879,177,0.538,178,1.317,179,0.595,180,0.879,181,0.595,182,0.879,183,1.073,184,1.634,185,0.538,186,0.879,187,0.538,188,0.879,189,0.595,190,0.797,191,0.879,192,0.879,193,0.879,194,0.02,195,0.02,214,1.432,228,3.134,251,0.972,255,1.242,274,1.077,289,1.949,292,0.972,295,1.077,299,2.1,301,1.971,305,1.745,307,1.906,316,2.564,321,0.797,323,2.298,326,1.179,339,1.853,341,1.614,350,3.995,370,1.745,371,3.554,373,1.745,375,1.782,376,2.156,400,1.614,450,1.455,463,1.971,469,1.455,471,1.455,498,2.148,507,1.971,526,1.798,530,2.178,543,1.201,593,1.534,594,1.935,595,3.2,596,2.669,598,2.788,600,2.148,601,1.201,602,1.782,623,2.02,624,2.02,625,1.798,626,2.02,627,2.02,630,3.2,637,1.614,638,1.614,639,1.614,640,1.782,647,1.201,648,1.077,652,1.349,653,1.614,654,1.349,656,1.349,657,1.349,661,2.422,662,1.534,677,1.782,678,2.669,679,2.669,680,2.02,681,1.782,682,2.298,683,1.349,689,1.077,693,3.023,776,4.142,777,2.159,778,3.234,779,3.234,780,2.159,781,4.305,782,2.159,783,2.159,784,2.159,785,3.234,786,3.234,787,2.159,788,2.159,789,2.159,790,3.234]],["title/interfaces/RequestData.html",[376,1.675,585,0.916]],["body/interfaces/RequestData.html",[3,0.541,4,0.467,9,0.395,11,0.703,23,0.541,24,0.837,26,3.32,35,0.038,37,0.644,47,1.588,69,0.959,79,0.541,194,0.032,195,0.032,255,0.985,376,2.899,585,1.585,586,2.185,693,3.73,791,3.615,792,5.761]],["title/interfaces/ResponseData.html",[585,0.916,642,1.881]],["body/interfaces/ResponseData.html",[3,0.501,4,0.432,9,0.366,11,0.651,23,0.501,24,0.799,26,3.261,35,0.039,37,0.694,69,0.971,79,0.501,194,0.031,195,0.031,255,0.911,286,1.965,299,2.232,370,1.824,585,1.513,586,2.023,604,4.755,642,3.107,693,3.663,793,3.346,794,6.044,795,5.613,796,4.107]],["title/interfaces/SignIn.html",[253,1.356,585,0.916]],["body/interfaces/SignIn.html",[3,0.545,4,0.469,9,0.398,11,0.707,23,0.545,24,0.84,35,0.038,37,0.647,47,1.591,69,0.96,79,0.545,194,0.032,195,0.032,253,2.355,255,0.991,286,2.004,326,1.339,585,1.591,586,2.198,797,3.636,798,3.735]],["title/interfaces/SignUp.html",[254,1.356,585,0.916]],["body/interfaces/SignUp.html",[3,0.515,4,0.444,9,0.376,11,0.669,23,0.515,24,0.812,35,0.039,37,0.674,38,1.447,47,1.626,69,0.975,79,0.515,194,0.031,195,0.031,254,2.277,255,0.937,286,1.978,326,1.267,327,2.079,585,1.538,586,2.079,798,3.687,799,3.44,800,4.872,801,4.498]],["title/components/SigninComponent.html",[0,0.426,185,0.751]],["body/components/SigninComponent.html",[0,0.773,1,0.596,2,1.196,3,0.267,4,0.23,5,0.881,6,0.881,7,0.881,8,0.881,9,0.195,11,0.52,14,1.196,16,0.881,17,2.19,18,1.802,19,1.319,21,1.319,23,0.267,24,0.52,27,0.892,29,1.187,31,1.423,32,1.335,34,0.596,35,0.039,36,1.07,37,0.638,38,0.539,39,1.555,40,1.458,41,2.417,44,1.187,47,1.481,51,1.616,56,0.799,58,0.892,59,1.196,61,1.187,62,0.892,65,1.986,66,2.084,69,0.877,74,1.129,75,0.437,77,0.799,78,0.974,79,0.267,80,0.486,81,1.07,170,0.725,171,1.319,172,1.319,173,0.881,174,1.755,175,0.881,176,0.881,177,0.539,178,1.319,179,0.596,180,0.881,181,0.596,182,0.881,183,0.539,184,0.658,185,1.074,186,0.881,187,0.539,188,0.881,189,0.596,190,0.799,191,0.881,192,0.881,193,0.881,194,0.02,195,0.02,248,1.079,251,1.747,253,2.077,255,1.227,286,1.683,289,1.907,292,0.974,295,1.079,299,1.95,301,1.973,305,0.974,307,1.907,316,1.203,321,0.799,326,1.681,331,1.537,339,1.854,341,1.616,351,3.998,370,1.747,373,1.458,378,1.786,381,3.557,382,2.673,442,3.668,444,2.692,450,1.458,463,1.973,469,1.458,471,1.458,498,2.15,507,1.973,526,1.801,530,2.26,543,1.203,546,1.537,570,1.537,571,1.537,574,1.786,576,1.537,594,1.937,598,2.789,600,2.15,601,1.203,623,2.023,624,2.023,625,1.801,626,2.023,627,2.023,628,2.301,637,1.616,638,1.616,639,1.616,647,1.203,648,1.079,652,1.351,653,1.616,654,1.351,656,1.351,657,1.351,661,2.023,680,1.351,683,1.351,689,1.079,798,3.025,802,1.786,803,3.881,804,3.238,805,2.163,806,2.673,807,3.557,808,2.163,809,2.163,810,2.163,811,2.163,812,2.163,813,2.163,814,3.238,815,3.238,816,1.786,817,1.786,818,1.786,819,1.786,820,2.673,821,2.163,822,1.786,823,2.163,824,1.786,825,1.786,826,2.163,827,2.163,828,3.238]],["title/components/SignupComponent.html",[0,0.426,187,0.751]],["body/components/SignupComponent.html",[0,0.762,1,0.562,2,1.144,3,0.252,4,0.217,5,0.83,6,0.83,7,0.83,8,0.83,9,0.184,11,0.497,14,1.144,16,0.83,17,2.157,18,1.775,19,1.261,21,1.261,23,0.252,24,0.497,27,0.853,29,1.152,31,1.459,32,1.356,34,0.562,35,0.039,36,1.032,37,0.655,38,1.042,39,1.537,40,1.394,41,2.363,44,1.152,47,1.537,50,1.722,51,1.545,56,0.753,58,0.853,59,1.144,61,1.305,62,1.032,65,1.956,66,2.06,69,0.911,74,1.107,75,0.412,77,0.753,78,0.918,79,0.252,80,0.458,81,1.032,170,0.683,171,1.261,172,1.261,173,0.83,174,1.704,175,0.83,176,0.83,177,0.508,178,1.261,179,0.562,180,0.83,181,0.562,182,0.83,183,0.508,184,1.367,185,0.508,186,0.83,187,1.042,188,0.83,189,0.562,190,0.753,191,0.83,192,0.83,193,0.83,194,0.019,195,0.019,248,1.017,251,1.685,254,2.024,255,1.107,286,1.649,289,1.873,292,0.918,295,1.017,299,1.818,301,1.929,305,0.918,307,1.873,316,1.134,321,0.753,326,1.659,327,2.723,331,1.448,339,1.818,341,1.545,353,3.909,370,2.024,373,1.394,397,1.683,400,1.545,442,3.603,444,2.612,450,1.394,463,2.065,469,1.394,471,1.394,498,2.087,507,2.065,526,1.722,529,1.683,530,2.215,543,1.134,546,1.448,570,1.448,571,1.448,576,1.448,594,1.869,598,2.755,600,2.087,601,1.134,623,1.934,624,1.934,625,1.722,626,2.612,627,1.934,631,2.2,637,1.545,638,1.545,639,1.545,647,1.134,648,1.017,652,1.273,653,1.545,654,1.273,656,1.273,657,1.273,661,1.934,662,1.448,680,1.273,683,1.273,689,1.017,798,2.958,800,3.909,801,1.683,806,2.556,807,3.452,816,1.683,817,1.683,818,1.683,819,1.683,820,2.556,822,1.683,824,1.683,825,1.683,829,1.683,830,3.097,831,3.745,832,3.097,833,2.039,834,2.039,835,3.097,836,2.039,837,2.039,838,2.039,839,2.039,840,2.039,841,2.039,842,3.097,843,3.097,844,1.683,845,3.097,846,2.039,847,2.039,848,3.097]],["title/components/WebSocketComponent.html",[0,0.426,189,0.83]],["body/components/WebSocketComponent.html",[0,0.811,1,0.839,2,1.527,3,0.377,4,0.325,5,1.241,6,1.241,7,1.241,8,1.241,9,0.275,11,0.664,14,1.527,15,2.933,16,1.241,17,2.36,18,1.942,19,1.685,21,1.685,23,0.377,24,0.664,27,1.14,28,3.146,29,1.294,32,1.294,34,0.839,35,0.039,36,1.294,37,0.58,38,0.759,39,1.496,40,1.861,44,1.14,45,2.583,56,1.527,58,0.839,59,1.527,61,1.14,62,0.839,65,1.527,69,0.846,74,0.93,75,0.615,79,0.377,80,0.685,81,0.839,82,1.241,170,1.021,171,1.685,172,1.685,173,1.241,174,2.051,175,1.241,176,1.241,177,0.759,178,1.685,179,0.839,180,1.241,181,0.839,182,1.241,183,0.759,184,0.926,185,0.759,186,1.241,187,0.759,188,1.241,189,1.388,190,2.087,191,1.913,192,1.241,193,1.241,194,0.025,195,0.025,239,3.578,255,0.93,289,1.86,299,1.527,301,1.685,307,1.527,339,2.052,341,2.064,349,2.514,373,2.669,374,4.116,463,1.685,469,1.861,471,1.861,507,1.685,601,1.694,628,2.938,647,1.694,849,4.157,850,2.514,851,5.036,852,4.696,853,4.136,854,3.046,855,3.046,856,4.136,857,3.046,858,3.046,859,3.046,860,3.046]],["title/coverage.html",[861,3.388]],["body/coverage.html",[0,0.834,1,1.019,9,0.334,10,3.052,31,1.019,35,0.038,37,0.457,77,1.365,155,5.134,177,0.922,179,1.019,181,1.019,183,0.922,185,0.922,187,0.922,189,1.019,194,0.029,195,0.029,210,1.845,211,2.056,225,2.309,228,2.309,239,2.627,253,1.664,254,1.664,259,2.103,261,3.052,296,2.627,298,3.052,339,1.365,340,3.052,376,2.056,400,1.845,404,3.225,411,2.627,427,3.052,466,2.309,585,1.705,587,3.052,592,3.052,593,3.337,629,4.629,642,2.309,728,3.052,761,3.052,776,3.052,791,3.052,793,3.052,797,3.052,799,3.052,802,3.052,829,3.052,849,3.052,850,3.052,861,3.052,862,3.052,863,3.697,864,3.697,865,4.697,866,3.697,867,4.697,868,3.697,869,4.697,870,5.163,871,5.432,872,3.697,873,3.697,874,3.697,875,3.052,876,5.607,877,3.052,878,3.052,879,3.052,880,3.052,881,3.697,882,3.697]],["title/dependencies.html",[199,2.261,883,2.079]],["body/dependencies.html",[35,0.038,72,2.651,75,0.914,194,0.033,195,0.033,199,2.824,219,4.385,231,3.732,248,2.256,321,1.67,884,4.521,885,6.115,886,4.521,887,4.521,888,4.521,889,4.521,890,4.521,891,4.521,892,4.521,893,4.521]],["title/index.html",[23,0.311,390,1.789,894,2.518]],["body/index.html",[4,0.44,13,3.315,35,0.031,51,2.06,72,2.06,89,4.479,90,4.153,190,1.525,194,0.031,195,0.031,214,1.525,444,3.39,473,4.013,796,3.408,862,4.479,895,4.128,896,4.128,897,4.128,898,4.128,899,3.408,900,4.128,901,3.408,902,4.128,903,4.128,904,5.031,905,5.648,906,4.128,907,4.128,908,4.128,909,4.128,910,4.128,911,4.128,912,4.128,913,4.128,914,4.128,915,5.962,916,4.128,917,4.128,918,5.648,919,4.153,920,4.128,921,4.128,922,4.128,923,4.128,924,5.426,925,4.128,926,5.031,927,4.128,928,4.128,929,5.031,930,4.128,931,4.128,932,4.128]],["title/modules.html",[198,2.282]],["body/modules.html",[35,0.034,72,2.387,194,0.034,195,0.034,197,2.387,198,2.66,209,2.66,933,4.783,934,4.783,935,5.489,936,4.783,937,4.783]],["title/overview.html",[938,3.388]],["body/overview.html",[1,1.632,2,1.478,35,0.038,170,1.341,177,1.334,179,1.475,181,1.475,183,1.334,185,1.334,187,1.334,189,1.475,194,0.03,195,0.03,196,2.5,197,3.137,198,2.226,199,2.5,200,3.304,201,3.304,202,3.304,203,2.844,204,3.304,205,3.304,206,3.304,207,3.304,208,3.304,209,2.976,210,2.671,211,2.976,212,4.075,213,2.844,214,1.478,247,2.226,260,2.5,586,1.997,938,3.304,939,4.002,940,4.002,941,4.002,942,4.936]],["title/properties.html",[24,0.581,883,2.079]],["body/properties.html",[24,0.778,35,0.036,194,0.034,195,0.034,901,4,943,4.845]],["title/routes.html",[247,2.282]],["body/routes.html",[35,0.034,194,0.034,195,0.034,247,2.712]],["title/miscellaneous/variables.html",[944,2.079,945,2.989]],["body/miscellaneous/variables.html",[9,0.467,18,1.581,23,0.46,35,0.039,37,0.695,61,1.582,62,1.548,63,2.946,68,2.07,77,1.742,194,0.029,195,0.029,214,1.375,252,3.072,253,2.331,254,2.331,255,1.224,289,1.742,301,1.516,304,2.644,326,1.132,327,1.857,346,4.275,347,4.275,374,3.352,390,2.644,404,3.791,411,3.352,428,3.072,436,4.275,473,3.869,581,2.644,844,4.638,875,3.072,877,3.072,878,3.072,879,3.072,880,3.072,899,3.072,919,3.072,944,3.072,945,3.072,946,3.722,947,3.722,948,3.722,949,3.722,950,3.722,951,4.717,952,3.722,953,3.722,954,3.722,955,3.722,956,4.717,957,5.179,958,3.722,959,3.722,960,3.722,961,3.722,962,3.722,963,3.722,964,3.722,965,3.722]]],"invertedIndex":[["",{"_index":35,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthGuard.html":{},"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"interfaces/DecodedJWT.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"interfaces/RequestData.html":{},"interfaces/ResponseData.html":{},"interfaces/SignIn.html":{},"interfaces/SignUp.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":168,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthGuard.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{}}}],["0.0.1",{"_index":943,"title":{},"body":{"properties.html":{}}}],["0.04em",{"_index":716,"title":{},"body":{"components/GetDataComponent.html":{}}}],["0.13.0",{"_index":893,"title":{},"body":{"dependencies.html":{}}}],["0.1em",{"_index":166,"title":{},"body":{"components/AppComponent.html":{}}}],["0.2em",{"_index":169,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{}}}],["0.44",{"_index":135,"title":{},"body":{"components/AppComponent.html":{}}}],["0.45em",{"_index":164,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{}}}],["0.84",{"_index":134,"title":{},"body":{"components/AppComponent.html":{}}}],["0.9em",{"_index":159,"title":{},"body":{"components/AppComponent.html":{}}}],["000",{"_index":699,"title":{},"body":{"components/GetDataComponent.html":{}}}],["01t21:08:40.472z",{"_index":613,"title":{},"body":{"components/GetDataComponent.html":{}}}],["01t21:08:40.472z&#39",{"_index":619,"title":{},"body":{"components/GetDataComponent.html":{}}}],["08",{"_index":612,"title":{},"body":{"components/GetDataComponent.html":{}}}],["0px",{"_index":118,"title":{},"body":{"components/AppComponent.html":{}}}],["1",{"_index":136,"title":{},"body":{"components/AppComponent.html":{},"interceptors/BackendInterceptor.html":{}}}],["1):after",{"_index":721,"title":{},"body":{"components/GetDataComponent.html":{}}}],["1.45em",{"_index":727,"title":{},"body":{"components/GetDataComponent.html":{}}}],["1.9em",{"_index":715,"title":{},"body":{"components/GetDataComponent.html":{}}}],["1/1",{"_index":876,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":155,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["100px",{"_index":110,"title":{},"body":{"components/AppComponent.html":{}}}],["10px",{"_index":758,"title":{},"body":{"components/NavbarComponent.html":{}}}],["111",{"_index":162,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{}}}],["120",{"_index":707,"title":{},"body":{"components/GetDataComponent.html":{}}}],["15/15",{"_index":874,"title":{},"body":{"coverage.html":{}}}],["16.0.0",{"_index":885,"title":{},"body":{"dependencies.html":{}}}],["16.0.2",{"_index":902,"title":{},"body":{"index.html":{}}}],["180",{"_index":117,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["1px",{"_index":697,"title":{},"body":{"components/GetDataComponent.html":{}}}],["2",{"_index":939,"title":{},"body":{"overview.html":{}}}],["2.3.0",{"_index":891,"title":{},"body":{"dependencies.html":{}}}],["2.5deg",{"_index":157,"title":{},"body":{"components/AppComponent.html":{}}}],["20px",{"_index":94,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{}}}],["2:38:40",{"_index":615,"title":{},"body":{"components/GetDataComponent.html":{}}}],["2s",{"_index":130,"title":{},"body":{"components/AppComponent.html":{}}}],["3",{"_index":941,"title":{},"body":{"overview.html":{}}}],["3/3",{"_index":871,"title":{},"body":{"coverage.html":{}}}],["350",{"_index":706,"title":{},"body":{"components/GetDataComponent.html":{}}}],["360deg",{"_index":103,"title":{},"body":{"components/AppComponent.html":{}}}],["39;8/2/2023",{"_index":620,"title":{},"body":{"components/GetDataComponent.html":{}}}],["39;hello",{"_index":501,"title":{},"body":{"injectables/CommonService.html":{}}}],["39;john",{"_index":494,"title":{},"body":{"injectables/CommonService.html":{}}}],["39;something",{"_index":479,"title":{},"body":{"injectables/CommonService.html":{}}}],["3d3d3d",{"_index":711,"title":{},"body":{"components/GetDataComponent.html":{}}}],["4/4",{"_index":870,"title":{},"body":{"coverage.html":{}}}],["401",{"_index":679,"title":{},"body":{"components/GetDataComponent.html":{},"components/PostDataComponent.html":{}}}],["450",{"_index":115,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["5",{"_index":942,"title":{},"body":{"overview.html":{}}}],["5/5",{"_index":865,"title":{},"body":{"coverage.html":{}}}],["5000",{"_index":954,"title":{},"body":{"miscellaneous/variables.html":{}}}],["500px",{"_index":147,"title":{},"body":{"components/AppComponent.html":{}}}],["50px",{"_index":148,"title":{},"body":{"components/AppComponent.html":{}}}],["5px",{"_index":104,"title":{},"body":{"components/AppComponent.html":{}}}],["6/6",{"_index":868,"title":{},"body":{"coverage.html":{}}}],["7.15em",{"_index":723,"title":{},"body":{"components/GetDataComponent.html":{}}}],["7.8.0",{"_index":889,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":869,"title":{},"body":{"coverage.html":{}}}],["768px",{"_index":145,"title":{},"body":{"components/AppComponent.html":{}}}],["8",{"_index":940,"title":{},"body":{"overview.html":{}}}],["8.5deg",{"_index":726,"title":{},"body":{"components/GetDataComponent.html":{}}}],["8/2/2023",{"_index":614,"title":{},"body":{"components/GetDataComponent.html":{}}}],["8/8",{"_index":867,"title":{},"body":{"coverage.html":{}}}],["80px",{"_index":146,"title":{},"body":{"components/AppComponent.html":{}}}],["9/10",{"_index":873,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":866,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":872,"title":{},"body":{"coverage.html":{}}}],["9f9f9f",{"_index":712,"title":{},"body":{"components/GetDataComponent.html":{}}}],["a:not(:first",{"_index":756,"title":{},"body":{"components/NavbarComponent.html":{}}}],["absolute",{"_index":160,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{}}}],["access",{"_index":55,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthGuard.html":{}}}],["accessors",{"_index":440,"title":{},"body":{"injectables/CommonService.html":{}}}],["accesstoken",{"_index":820,"title":{},"body":{"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["activated",{"_index":276,"title":{},"body":{"injectables/AuthGuard.html":{}}}],["activatedroutesnapshot",{"_index":270,"title":{},"body":{"injectables/AuthGuard.html":{}}}],["actual_component",{"_index":193,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["add",{"_index":303,"title":{},"body":{"interceptors/BackendInterceptor.html":{}}}],["additional",{"_index":451,"title":{},"body":{"injectables/CommonService.html":{}}}],["again",{"_index":581,"title":{},"body":{"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"miscellaneous/variables.html":{}}}],["align",{"_index":106,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{}}}],["already",{"_index":48,"title":{},"body":{"components/AppComponent.html":{},"injectables/CommonService.html":{}}}],["alternate",{"_index":137,"title":{},"body":{"components/AppComponent.html":{}}}],["always",{"_index":911,"title":{},"body":{"index.html":{}}}],["am&#39",{"_index":621,"title":{},"body":{"components/GetDataComponent.html":{}}}],["am/pm",{"_index":609,"title":{},"body":{"components/GetDataComponent.html":{}}}],["angular",{"_index":899,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["angular/animations",{"_index":884,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":886,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":234,"title":{},"body":{"modules/AppModule.html":{},"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{}}}],["angular/compiler",{"_index":887,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":75,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthGuard.html":{},"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":231,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":219,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":248,"title":{},"body":{"modules/AppRoutingModule.html":{},"injectables/AuthGuard.html":{},"injectables/CommonService.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"dependencies.html":{}}}],["animation",{"_index":129,"title":{},"body":{"components/AppComponent.html":{}}}],["anything",{"_index":472,"title":{},"body":{"injectables/CommonService.html":{}}}],["api",{"_index":301,"title":{},"body":{"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"components/GetDataComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{},"miscellaneous/variables.html":{}}}],["apipathconstant",{"_index":411,"title":{},"body":{"injectables/BackendService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apipathconstant.data",{"_index":422,"title":{},"body":{"injectables/BackendService.html":{}}}],["apipathconstant.signin",{"_index":417,"title":{},"body":{"injectables/BackendService.html":{}}}],["apipathconstant.signout",{"_index":420,"title":{},"body":{"injectables/BackendService.html":{}}}],["apipathconstant.signup",{"_index":418,"title":{},"body":{"injectables/BackendService.html":{}}}],["apis",{"_index":447,"title":{},"body":{"injectables/CommonService.html":{}}}],["app",{"_index":18,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{},"miscellaneous/variables.html":{}}}],["app.component",{"_index":221,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.css",{"_index":20,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.html",{"_index":22,"title":{},"body":{"components/AppComponent.html":{}}}],["app.module.ts",{"_index":343,"title":{},"body":{"injectables/BackendService.html":{},"injectables/CommonService.html":{}}}],["app.module.ts]{@link",{"_index":413,"title":{},"body":{"injectables/BackendService.html":{},"injectables/CommonService.html":{}}}],["appcomponent",{"_index":1,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{},"coverage.html":{},"overview.html":{}}}],["appconstant",{"_index":77,"title":{},"body":{"components/AppComponent.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["appconstant.appname",{"_index":70,"title":{},"body":{"components/AppComponent.html":{}}}],["appconstant.authorizationheaderkey",{"_index":574,"title":{},"body":{"injectables/CommonService.html":{},"components/SigninComponent.html":{}}}],["appconstant.error",{"_index":680,"title":{},"body":{"components/GetDataComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["appconstant.getdata",{"_index":663,"title":{},"body":{"components/GetDataComponent.html":{}}}],["appconstant.hidenotifcationafter",{"_index":775,"title":{},"body":{"components/NotificationComponent.html":{}}}],["appconstant.postdata",{"_index":790,"title":{},"body":{"components/PostDataComponent.html":{}}}],["appconstant.signin",{"_index":828,"title":{},"body":{"components/SigninComponent.html":{}}}],["appconstant.signinagain",{"_index":681,"title":{},"body":{"components/GetDataComponent.html":{},"components/PostDataComponent.html":{}}}],["appconstant.signout",{"_index":544,"title":{},"body":{"injectables/CommonService.html":{}}}],["appconstant.signup",{"_index":848,"title":{},"body":{"components/SignupComponent.html":{}}}],["appconstant.success",{"_index":543,"title":{},"body":{"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["application",{"_index":13,"title":{},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"index.html":{}}}],["appmodule",{"_index":197,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"modules.html":{},"overview.html":{}}}],["appname",{"_index":952,"title":{},"body":{"miscellaneous/variables.html":{}}}],["approutingmodule",{"_index":209,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["array",{"_index":644,"title":{},"body":{"components/GetDataComponent.html":{}}}],["article",{"_index":693,"title":{},"body":{"components/GetDataComponent.html":{},"components/PostDataComponent.html":{},"interfaces/RequestData.html":{},"interfaces/ResponseData.html":{}}}],["assuming",{"_index":283,"title":{},"body":{"injectables/AuthGuard.html":{}}}],["attaching",{"_index":332,"title":{},"body":{"interceptors/BackendInterceptor.html":{}}}],["auth",{"_index":262,"title":{},"body":{"injectables/AuthGuard.html":{}}}],["authguard",{"_index":210,"title":{"injectables/AuthGuard.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthGuard.html":{},"coverage.html":{},"overview.html":{}}}],["authorization",{"_index":304,"title":{},"body":{"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"miscellaneous/variables.html":{}}}],["authorizationheaderkey",{"_index":955,"title":{},"body":{"miscellaneous/variables.html":{}}}],["auto",{"_index":724,"title":{},"body":{"components/GetDataComponent.html":{}}}],["automatically",{"_index":921,"title":{},"body":{"index.html":{}}}],["available",{"_index":937,"title":{},"body":{"modules.html":{}}}],["backend",{"_index":299,"title":{},"body":{"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/PostDataComponent.html":{},"interfaces/ResponseData.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["backend.service",{"_index":527,"title":{},"body":{"injectables/CommonService.html":{}}}],["backendinterceptor",{"_index":211,"title":{"interceptors/BackendInterceptor.html":{}},"body":{"modules/AppModule.html":{},"interceptors/BackendInterceptor.html":{},"coverage.html":{},"overview.html":{}}}],["backendservice",{"_index":339,"title":{"injectables/BackendService.html":{}},"body":{"injectables/BackendService.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{},"coverage.html":{}}}],["backendservice#handlegetdata",{"_index":650,"title":{},"body":{"components/GetDataComponent.html":{}}}],["backendservice#handlegetwebsocketdata",{"_index":859,"title":{},"body":{"components/WebSocketComponent.html":{}}}],["backendservice#handlepostdata",{"_index":786,"title":{},"body":{"components/PostDataComponent.html":{}}}],["backendservice#handlesignin",{"_index":815,"title":{},"body":{"components/SigninComponent.html":{}}}],["backendservice#handlesignout",{"_index":539,"title":{},"body":{"injectables/CommonService.html":{}}}],["backendservice#handlesignup",{"_index":843,"title":{},"body":{"components/SignupComponent.html":{}}}],["backendurl",{"_index":346,"title":{},"body":{"injectables/BackendService.html":{},"miscellaneous/variables.html":{}}}],["background",{"_index":119,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{}}}],["bar",{"_index":730,"title":{},"body":{"components/NavbarComponent.html":{}}}],["base",{"_index":89,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["base64",{"_index":557,"title":{},"body":{"injectables/CommonService.html":{}}}],["based",{"_index":626,"title":{},"body":{"components/GetDataComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["basic",{"_index":907,"title":{},"body":{"index.html":{}}}],["bearer",{"_index":337,"title":{},"body":{"interceptors/BackendInterceptor.html":{}}}],["become",{"_index":632,"title":{},"body":{"components/GetDataComponent.html":{}}}],["behaviorsubject",{"_index":503,"title":{},"body":{"injectables/CommonService.html":{}}}],["behaviorsubject(false",{"_index":504,"title":{},"body":{"injectables/CommonService.html":{}}}],["better",{"_index":913,"title":{},"body":{"index.html":{}}}],["bezier(0.165",{"_index":133,"title":{},"body":{"components/AppComponent.html":{}}}],["black",{"_index":154,"title":{},"body":{"components/AppComponent.html":{}}}],["blur(0.5px",{"_index":718,"title":{},"body":{"components/GetDataComponent.html":{}}}],["body",{"_index":384,"title":{},"body":{"injectables/BackendService.html":{}}}],["boolean",{"_index":60,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthGuard.html":{},"injectables/CommonService.html":{}}}],["bootstrap",{"_index":201,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["border",{"_index":696,"title":{},"body":{"components/GetDataComponent.html":{}}}],["box",{"_index":695,"title":{},"body":{"components/GetDataComponent.html":{}}}],["browse",{"_index":935,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":72,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"injectables/CommonService.html":{},"dependencies.html":{},"index.html":{},"modules.html":{}}}],["browsermodule",{"_index":218,"title":{},"body":{"modules/AppModule.html":{}}}],["build",{"_index":929,"title":{},"body":{"index.html":{}}}],["building",{"_index":928,"title":{},"body":{"index.html":{}}}],["button",{"_index":631,"title":{},"body":{"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/SignupComponent.html":{}}}],["buttontext",{"_index":597,"title":{},"body":{"components/GetDataComponent.html":{}}}],["call",{"_index":307,"title":{},"body":{"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["called",{"_index":637,"title":{},"body":{"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["calling",{"_index":554,"title":{},"body":{"injectables/CommonService.html":{}}}],["calls",{"_index":302,"title":{},"body":{"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{}}}],["canactivate",{"_index":256,"title":{},"body":{"modules/AppRoutingModule.html":{},"injectables/AuthGuard.html":{}}}],["canactivate(route",{"_index":269,"title":{},"body":{"injectables/AuthGuard.html":{}}}],["case",{"_index":386,"title":{},"body":{"injectables/BackendService.html":{},"injectables/CommonService.html":{}}}],["catch",{"_index":563,"title":{},"body":{"injectables/CommonService.html":{},"components/GetDataComponent.html":{}}}],["center",{"_index":107,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{}}}],["certain",{"_index":773,"title":{},"body":{"components/NotificationComponent.html":{}}}],["chain",{"_index":318,"title":{},"body":{"interceptors/BackendInterceptor.html":{}}}],["change",{"_index":923,"title":{},"body":{"index.html":{}}}],["check",{"_index":46,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthGuard.html":{},"injectables/CommonService.html":{},"components/NavbarComponent.html":{}}}],["checkisloggedin",{"_index":734,"title":{},"body":{"components/NavbarComponent.html":{}}}],["checksavedcredentials",{"_index":433,"title":{},"body":{"injectables/CommonService.html":{}}}],["child",{"_index":757,"title":{},"body":{"components/NavbarComponent.html":{}}}],["child(2n",{"_index":720,"title":{},"body":{"components/GetDataComponent.html":{}}}],["child(2n):after",{"_index":725,"title":{},"body":{"components/GetDataComponent.html":{}}}],["class",{"_index":80,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthGuard.html":{},"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["clear",{"_index":482,"title":{},"body":{"injectables/CommonService.html":{}}}],["cli",{"_index":900,"title":{},"body":{"index.html":{}}}],["click",{"_index":835,"title":{},"body":{"components/SignupComponent.html":{}}}],["click)=\"handlesignout",{"_index":754,"title":{},"body":{"components/NavbarComponent.html":{}}}],["clicks",{"_index":635,"title":{},"body":{"components/GetDataComponent.html":{},"components/NavbarComponent.html":{}}}],["clip",{"_index":125,"title":{},"body":{"components/AppComponent.html":{}}}],["closed",{"_index":579,"title":{},"body":{"injectables/CommonService.html":{}}}],["cluster_appmodule",{"_index":204,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":206,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":208,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":205,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":207,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["color",{"_index":127,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{}}}],["column",{"_index":703,"title":{},"body":{"components/GetDataComponent.html":{}}}],["comes",{"_index":794,"title":{},"body":{"interfaces/ResponseData.html":{}}}],["common",{"_index":428,"title":{},"body":{"injectables/CommonService.html":{},"miscellaneous/variables.html":{}}}],["common.service",{"_index":280,"title":{},"body":{"injectables/AuthGuard.html":{},"interceptors/BackendInterceptor.html":{}}}],["commonservice",{"_index":31,"title":{"injectables/CommonService.html":{}},"body":{"components/AppComponent.html":{},"injectables/AuthGuard.html":{},"interceptors/BackendInterceptor.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"coverage.html":{}}}],["commonservice#handlesignout",{"_index":744,"title":{},"body":{"components/NavbarComponent.html":{}}}],["commonservice#loadersubject",{"_index":84,"title":{},"body":{"components/AppComponent.html":{}}}],["commonservice#loggedinusersubject",{"_index":282,"title":{},"body":{"injectables/AuthGuard.html":{},"components/NavbarComponent.html":{}}}],["commonservice#notificationsubject",{"_index":770,"title":{},"body":{"components/NotificationComponent.html":{}}}],["commonservice#token",{"_index":816,"title":{},"body":{"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["commonservice#username",{"_index":817,"title":{},"body":{"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["commonservice]{@link",{"_index":529,"title":{},"body":{"injectables/CommonService.html":{},"components/SignupComponent.html":{}}}],["compdoc",{"_index":925,"title":{},"body":{"index.html":{}}}],["completed",{"_index":624,"title":{},"body":{"components/GetDataComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["component",{"_index":0,"title":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{},"coverage.html":{}}}],["component_template",{"_index":175,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{},"overview.html":{}}}],["components/get",{"_index":224,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["components/navbar/navbar.component",{"_index":229,"title":{},"body":{"modules/AppModule.html":{}}}],["components/notification/notification.component",{"_index":235,"title":{},"body":{"modules/AppModule.html":{}}}],["components/post",{"_index":227,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["components/signin/signin.component",{"_index":222,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["components/signup/signup.component",{"_index":223,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["components/web",{"_index":238,"title":{},"body":{"modules/AppModule.html":{}}}],["connect",{"_index":856,"title":{},"body":{"components/WebSocketComponent.html":{}}}],["connected",{"_index":851,"title":{},"body":{"components/WebSocketComponent.html":{}}}],["console",{"_index":471,"title":{},"body":{"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["console.log(message",{"_index":584,"title":{},"body":{"injectables/CommonService.html":{}}}],["const",{"_index":251,"title":{},"body":{"modules/AppRoutingModule.html":{},"interceptors/BackendInterceptor.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["constant",{"_index":249,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["constants",{"_index":951,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constructor",{"_index":29,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthGuard.html":{},"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["constructor(backendservice",{"_index":601,"title":{},"body":{"components/GetDataComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["constructor(commonservice",{"_index":30,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthGuard.html":{},"interceptors/BackendInterceptor.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{}}}],["constructor(httpclient",{"_index":354,"title":{},"body":{"injectables/BackendService.html":{}}}],["constructor(private",{"_index":82,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthGuard.html":{},"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/WebSocketComponent.html":{}}}],["constructor(router",{"_index":441,"title":{},"body":{"injectables/CommonService.html":{}}}],["contains",{"_index":250,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["content",{"_index":153,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{}}}],["coverage",{"_index":861,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":830,"title":{},"body":{"components/SignupComponent.html":{}}}],["created",{"_index":796,"title":{},"body":{"interfaces/ResponseData.html":{},"index.html":{}}}],["createdat",{"_index":795,"title":{},"body":{"interfaces/ResponseData.html":{}}}],["creates",{"_index":399,"title":{},"body":{"injectables/BackendService.html":{}}}],["creating",{"_index":818,"title":{},"body":{"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["cubic",{"_index":132,"title":{},"body":{"components/AppComponent.html":{}}}],["current",{"_index":363,"title":{},"body":{"injectables/BackendService.html":{},"components/GetDataComponent.html":{}}}],["currentoffset",{"_index":362,"title":{},"body":{"injectables/BackendService.html":{},"components/GetDataComponent.html":{}}}],["data",{"_index":255,"title":{},"body":{"modules/AppRoutingModule.html":{},"injectables/AuthGuard.html":{},"injectables/BackendService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/PostDataComponent.html":{},"interfaces/RequestData.html":{},"interfaces/ResponseData.html":{},"interfaces/SignIn.html":{},"interfaces/SignUp.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{},"miscellaneous/variables.html":{}}}],["data'},{'name",{"_index":178,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["data.component",{"_index":226,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["data.component.css",{"_index":595,"title":{},"body":{"components/GetDataComponent.html":{},"components/PostDataComponent.html":{}}}],["data.component.html",{"_index":596,"title":{},"body":{"components/GetDataComponent.html":{},"components/PostDataComponent.html":{}}}],["data.component.ts",{"_index":593,"title":{},"body":{"components/GetDataComponent.html":{},"components/PostDataComponent.html":{},"coverage.html":{}}}],["data.component.ts:108",{"_index":780,"title":{},"body":{"components/PostDataComponent.html":{}}}],["data.component.ts:122",{"_index":605,"title":{},"body":{"components/GetDataComponent.html":{}}}],["data.component.ts:139",{"_index":636,"title":{},"body":{"components/GetDataComponent.html":{}}}],["data.component.ts:16",{"_index":602,"title":{},"body":{"components/GetDataComponent.html":{},"components/PostDataComponent.html":{}}}],["data.component.ts:32",{"_index":640,"title":{},"body":{"components/GetDataComponent.html":{},"components/PostDataComponent.html":{}}}],["data.component.ts:38",{"_index":641,"title":{},"body":{"components/GetDataComponent.html":{}}}],["data.component.ts:39",{"_index":783,"title":{},"body":{"components/PostDataComponent.html":{}}}],["data.component.ts:45",{"_index":643,"title":{},"body":{"components/GetDataComponent.html":{}}}],["data.component.ts:46",{"_index":782,"title":{},"body":{"components/PostDataComponent.html":{}}}],["data.component.ts:52",{"_index":645,"title":{},"body":{"components/GetDataComponent.html":{}}}],["data.component.ts:54",{"_index":777,"title":{},"body":{"components/PostDataComponent.html":{}}}],["data.component.ts:63",{"_index":622,"title":{},"body":{"components/GetDataComponent.html":{}}}],["data/get",{"_index":225,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GetDataComponent.html":{},"coverage.html":{}}}],["data/post",{"_index":228,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/PostDataComponent.html":{},"coverage.html":{}}}],["data]{@link",{"_index":651,"title":{},"body":{"components/GetDataComponent.html":{}}}],["date",{"_index":604,"title":{},"body":{"components/GetDataComponent.html":{},"interfaces/ResponseData.html":{}}}],["date(date",{"_index":684,"title":{},"body":{"components/GetDataComponent.html":{}}}],["dd/mm/yyyy",{"_index":607,"title":{},"body":{"components/GetDataComponent.html":{}}}],["declarations",{"_index":200,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["decode",{"_index":456,"title":{},"body":{"injectables/CommonService.html":{}}}],["decoded",{"_index":462,"title":{},"body":{"injectables/CommonService.html":{},"interfaces/DecodedJWT.html":{}}}],["decodedjwt",{"_index":466,"title":{"interfaces/DecodedJWT.html":{}},"body":{"injectables/CommonService.html":{},"interfaces/DecodedJWT.html":{},"coverage.html":{}}}],["decodedpayload",{"_index":561,"title":{},"body":{"injectables/CommonService.html":{}}}],["decodedtoken",{"_index":576,"title":{},"body":{"injectables/CommonService.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["decodedtoken.username",{"_index":578,"title":{},"body":{"injectables/CommonService.html":{}}}],["decodedtoken?.username",{"_index":825,"title":{},"body":{"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["decodetoken",{"_index":434,"title":{},"body":{"injectables/CommonService.html":{}}}],["decodetoken(jwt",{"_index":464,"title":{},"body":{"injectables/CommonService.html":{}}}],["decodetoken(token",{"_index":459,"title":{},"body":{"injectables/CommonService.html":{}}}],["decoding",{"_index":458,"title":{},"body":{"injectables/CommonService.html":{}}}],["default",{"_index":61,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthGuard.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":32,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthGuard.html":{},"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["dependencies",{"_index":199,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":11,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthGuard.html":{},"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"interfaces/DecodedJWT.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"interfaces/RequestData.html":{},"interfaces/ResponseData.html":{},"interfaces/SignIn.html":{},"interfaces/SignUp.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["destroyed",{"_index":638,"title":{},"body":{"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["development",{"_index":919,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["different",{"_index":445,"title":{},"body":{"injectables/CommonService.html":{}}}],["direct",{"_index":53,"title":{},"body":{"components/AppComponent.html":{}}}],["direction",{"_index":702,"title":{},"body":{"components/GetDataComponent.html":{}}}],["directive",{"_index":173,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["directives",{"_index":192,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["display",{"_index":700,"title":{},"body":{"components/GetDataComponent.html":{},"components/NavbarComponent.html":{}}}],["dist",{"_index":930,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":862,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documented",{"_index":910,"title":{},"body":{"index.html":{}}}],["documents",{"_index":671,"title":{},"body":{"components/GetDataComponent.html":{}}}],["doe",{"_index":490,"title":{},"body":{"injectables/CommonService.html":{}}}],["doe&#39",{"_index":495,"title":{},"body":{"injectables/CommonService.html":{}}}],["dom",{"_index":7,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["dynamic",{"_index":888,"title":{},"body":{"dependencies.html":{}}}],["element",{"_index":172,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["email",{"_index":800,"title":{},"body":{"interfaces/SignUp.html":{},"components/SignupComponent.html":{}}}],["emphasis",{"_index":140,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{}}}],["empty",{"_index":463,"title":{},"body":{"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["environment",{"_index":404,"title":{},"body":{"injectables/BackendService.html":{},"injectables/CommonService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["environment.backendurl",{"_index":401,"title":{},"body":{"injectables/BackendService.html":{}}}],["environment.production",{"_index":583,"title":{},"body":{"injectables/CommonService.html":{}}}],["equal",{"_index":669,"title":{},"body":{"components/GetDataComponent.html":{}}}],["error",{"_index":289,"title":{},"body":{"injectables/AuthGuard.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{},"miscellaneous/variables.html":{}}}],["error.error?.message",{"_index":683,"title":{},"body":{"components/GetDataComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["error?.status",{"_index":678,"title":{},"body":{"components/GetDataComponent.html":{},"components/PostDataComponent.html":{}}}],["example",{"_index":465,"title":{},"body":{"injectables/CommonService.html":{},"components/GetDataComponent.html":{}}}],["existing",{"_index":381,"title":{},"body":{"injectables/BackendService.html":{},"components/SigninComponent.html":{}}}],["exp",{"_index":552,"title":{},"body":{"injectables/CommonService.html":{},"interfaces/DecodedJWT.html":{}}}],["expiration",{"_index":588,"title":{},"body":{"interfaces/DecodedJWT.html":{}}}],["expired",{"_index":630,"title":{},"body":{"components/GetDataComponent.html":{},"components/PostDataComponent.html":{}}}],["export",{"_index":79,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthGuard.html":{},"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"interfaces/DecodedJWT.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"interfaces/RequestData.html":{},"interfaces/ResponseData.html":{},"interfaces/SignIn.html":{},"interfaces/SignUp.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["exports",{"_index":203,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"overview.html":{}}}],["extracted",{"_index":591,"title":{},"body":{"interfaces/DecodedJWT.html":{}}}],["f35626",{"_index":123,"title":{},"body":{"components/AppComponent.html":{}}}],["false",{"_index":63,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthGuard.html":{},"injectables/CommonService.html":{},"miscellaneous/variables.html":{}}}],["feab3a",{"_index":124,"title":{},"body":{"components/AppComponent.html":{}}}],["file",{"_index":9,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthGuard.html":{},"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"interfaces/DecodedJWT.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"interfaces/RequestData.html":{},"interfaces/ResponseData.html":{},"interfaces/SignIn.html":{},"interfaces/SignUp.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["files",{"_index":924,"title":{},"body":{"index.html":{}}}],["fill",{"_index":126,"title":{},"body":{"components/AppComponent.html":{}}}],["filter",{"_index":98,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{}}}],["finalize",{"_index":526,"title":{},"body":{"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["first",{"_index":634,"title":{},"body":{"components/GetDataComponent.html":{}}}],["flex",{"_index":701,"title":{},"body":{"components/GetDataComponent.html":{},"components/NavbarComponent.html":{}}}],["folder",{"_index":931,"title":{},"body":{"index.html":{}}}],["font",{"_index":108,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{}}}],["form",{"_index":371,"title":{},"body":{"injectables/BackendService.html":{},"components/PostDataComponent.html":{}}}],["format",{"_index":606,"title":{},"body":{"components/GetDataComponent.html":{}}}],["formatdate",{"_index":599,"title":{},"body":{"components/GetDataComponent.html":{}}}],["formatdate(&#39;2023",{"_index":618,"title":{},"body":{"components/GetDataComponent.html":{}}}],["formatdate('2023",{"_index":611,"title":{},"body":{"components/GetDataComponent.html":{}}}],["formatdate(date",{"_index":603,"title":{},"body":{"components/GetDataComponent.html":{}}}],["formatdate(item.createdat",{"_index":691,"title":{},"body":{"components/GetDataComponent.html":{}}}],["formatted",{"_index":616,"title":{},"body":{"components/GetDataComponent.html":{}}}],["formsmodule",{"_index":230,"title":{},"body":{"modules/AppModule.html":{}}}],["frontend",{"_index":90,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["g",{"_index":559,"title":{},"body":{"injectables/CommonService.html":{}}}],["generated",{"_index":898,"title":{},"body":{"index.html":{}}}],["generating",{"_index":926,"title":{},"body":{"index.html":{}}}],["getdata",{"_index":958,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdatacomponent",{"_index":177,"title":{"components/GetDataComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{},"coverage.html":{},"overview.html":{}}}],["getting",{"_index":390,"title":{"index.html":{}},"body":{"injectables/BackendService.html":{},"miscellaneous/variables.html":{}}}],["gettoken",{"_index":518,"title":{},"body":{"injectables/CommonService.html":{}}}],["getusername",{"_index":522,"title":{},"body":{"injectables/CommonService.html":{}}}],["gradient(90deg",{"_index":122,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{}}}],["graph",{"_index":936,"title":{},"body":{"modules.html":{}}}],["greater",{"_index":668,"title":{},"body":{"components/GetDataComponent.html":{}}}],["guard",{"_index":263,"title":{},"body":{"injectables/AuthGuard.html":{}}}],["handle",{"_index":50,"title":{},"body":{"components/AppComponent.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"components/PostDataComponent.html":{},"components/SignupComponent.html":{}}}],["handlegetdata",{"_index":348,"title":{},"body":{"injectables/BackendService.html":{},"components/GetDataComponent.html":{}}}],["handlegetdata(currentoffset",{"_index":357,"title":{},"body":{"injectables/BackendService.html":{}}}],["handlegetdata(this.currentoffset",{"_index":655,"title":{},"body":{"components/GetDataComponent.html":{}}}],["handlegetdata]{@link",{"_index":649,"title":{},"body":{"components/GetDataComponent.html":{}}}],["handlegetwebsocketdata",{"_index":349,"title":{},"body":{"injectables/BackendService.html":{},"components/WebSocketComponent.html":{}}}],["handlegetwebsocketdata]{@link",{"_index":858,"title":{},"body":{"components/WebSocketComponent.html":{}}}],["handlepostdata",{"_index":350,"title":{},"body":{"injectables/BackendService.html":{},"components/PostDataComponent.html":{}}}],["handlepostdata(data",{"_index":375,"title":{},"body":{"injectables/BackendService.html":{},"components/PostDataComponent.html":{}}}],["handlepostdata]{@link",{"_index":785,"title":{},"body":{"components/PostDataComponent.html":{}}}],["handler",{"_index":317,"title":{},"body":{"interceptors/BackendInterceptor.html":{}}}],["handlesignin",{"_index":351,"title":{},"body":{"injectables/BackendService.html":{},"components/SigninComponent.html":{}}}],["handlesignin(data",{"_index":378,"title":{},"body":{"injectables/BackendService.html":{},"components/SigninComponent.html":{}}}],["handlesignin]{@link",{"_index":814,"title":{},"body":{"components/SigninComponent.html":{}}}],["handlesignout",{"_index":352,"title":{},"body":{"injectables/BackendService.html":{},"injectables/CommonService.html":{},"components/NavbarComponent.html":{}}}],["handlesignout]{@link",{"_index":538,"title":{},"body":{"injectables/CommonService.html":{},"components/NavbarComponent.html":{}}}],["handlesignup",{"_index":353,"title":{},"body":{"injectables/BackendService.html":{},"components/SignupComponent.html":{}}}],["handlesignup(data",{"_index":397,"title":{},"body":{"injectables/BackendService.html":{},"components/SignupComponent.html":{}}}],["handlesignup]{@link",{"_index":842,"title":{},"body":{"components/SignupComponent.html":{}}}],["happened",{"_index":476,"title":{},"body":{"injectables/CommonService.html":{}}}],["happened.&#39",{"_index":480,"title":{},"body":{"injectables/CommonService.html":{}}}],["header",{"_index":387,"title":{},"body":{"injectables/BackendService.html":{}}}],["headers",{"_index":306,"title":{},"body":{"interceptors/BackendInterceptor.html":{}}}],["height",{"_index":158,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{}}}],["hello",{"_index":425,"title":{},"body":{"injectables/BackendService.html":{},"injectables/CommonService.html":{}}}],["here",{"_index":806,"title":{},"body":{"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["hh:mm:ss",{"_index":608,"title":{},"body":{"components/GetDataComponent.html":{}}}],["hide",{"_index":625,"title":{},"body":{"components/GetDataComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["hidenotifcationafter",{"_index":953,"title":{},"body":{"miscellaneous/variables.html":{}}}],["highlight",{"_index":149,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{}}}],["highlight:after",{"_index":708,"title":{},"body":{"components/GetDataComponent.html":{}}}],["highlight:before",{"_index":152,"title":{},"body":{"components/AppComponent.html":{}}}],["highlight:nth",{"_index":719,"title":{},"body":{"components/GetDataComponent.html":{}}}],["home",{"_index":749,"title":{},"body":{"components/NavbarComponent.html":{}}}],["html",{"_index":171,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["http://127.0.0.1:5500/frontend/documentation/index.html",{"_index":927,"title":{},"body":{"index.html":{}}}],["http://:3000/api",{"_index":964,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://localhost:3000/api",{"_index":962,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://localhost:4200",{"_index":920,"title":{},"body":{"index.html":{}}}],["http_interceptors",{"_index":232,"title":{},"body":{"modules/AppModule.html":{}}}],["httpclient",{"_index":355,"title":{},"body":{"injectables/BackendService.html":{}}}],["httpclientmodule",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["httpevent",{"_index":319,"title":{},"body":{"interceptors/BackendInterceptor.html":{}}}],["httphandler",{"_index":313,"title":{},"body":{"interceptors/BackendInterceptor.html":{}}}],["httpinterceptor",{"_index":320,"title":{},"body":{"interceptors/BackendInterceptor.html":{}}}],["httprequest",{"_index":312,"title":{},"body":{"interceptors/BackendInterceptor.html":{}}}],["httpresponse",{"_index":406,"title":{},"body":{"injectables/BackendService.html":{}}}],["hue",{"_index":96,"title":{},"body":{"components/AppComponent.html":{}}}],["i.e",{"_index":277,"title":{},"body":{"injectables/AuthGuard.html":{},"injectables/CommonService.html":{}}}],["iat",{"_index":553,"title":{},"body":{"injectables/CommonService.html":{},"interfaces/DecodedJWT.html":{}}}],["identifier",{"_index":863,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":120,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{}}}],["implements",{"_index":14,"title":{},"body":{"components/AppComponent.html":{},"interceptors/BackendInterceptor.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["import",{"_index":74,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthGuard.html":{},"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["important",{"_index":111,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["imports",{"_index":216,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["increasing",{"_index":664,"title":{},"body":{"components/GetDataComponent.html":{}}}],["index",{"_index":23,"title":{"index.html":{}},"body":{"components/AppComponent.html":{},"injectables/AuthGuard.html":{},"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"interfaces/DecodedJWT.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"interfaces/RequestData.html":{},"interfaces/ResponseData.html":{},"interfaces/SignIn.html":{},"interfaces/SignUp.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{},"miscellaneous/variables.html":{}}}],["infinite",{"_index":131,"title":{},"body":{"components/AppComponent.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthGuard.html":{},"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"interfaces/DecodedJWT.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"interfaces/RequestData.html":{},"interfaces/ResponseData.html":{},"interfaces/SignIn.html":{},"interfaces/SignUp.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["initialize",{"_index":45,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/WebSocketComponent.html":{}}}],["initialized",{"_index":507,"title":{},"body":{"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["injectable",{"_index":259,"title":{"injectables/AuthGuard.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{}},"body":{"injectables/AuthGuard.html":{},"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"coverage.html":{}}}],["injectables",{"_index":260,"title":{},"body":{"injectables/AuthGuard.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"overview.html":{}}}],["injected",{"_index":342,"title":{},"body":{"injectables/BackendService.html":{},"injectables/CommonService.html":{}}}],["intercept",{"_index":300,"title":{},"body":{"interceptors/BackendInterceptor.html":{}}}],["intercept(request",{"_index":311,"title":{},"body":{"interceptors/BackendInterceptor.html":{}}}],["interceptor",{"_index":296,"title":{"interceptors/BackendInterceptor.html":{}},"body":{"interceptors/BackendInterceptor.html":{},"coverage.html":{}}}],["interceptors",{"_index":297,"title":{},"body":{"interceptors/BackendInterceptor.html":{}}}],["interface",{"_index":585,"title":{"interfaces/DecodedJWT.html":{},"interfaces/RequestData.html":{},"interfaces/ResponseData.html":{},"interfaces/SignIn.html":{},"interfaces/SignUp.html":{}},"body":{"interfaces/DecodedJWT.html":{},"interfaces/RequestData.html":{},"interfaces/ResponseData.html":{},"interfaces/SignIn.html":{},"interfaces/SignUp.html":{},"coverage.html":{}}}],["interfaces",{"_index":586,"title":{},"body":{"interfaces/DecodedJWT.html":{},"interfaces/RequestData.html":{},"interfaces/ResponseData.html":{},"interfaces/SignIn.html":{},"interfaces/SignUp.html":{},"overview.html":{}}}],["introduction",{"_index":896,"title":{},"body":{"index.html":{}}}],["invalid",{"_index":610,"title":{},"body":{"components/GetDataComponent.html":{}}}],["issue",{"_index":590,"title":{},"body":{"interfaces/DecodedJWT.html":{}}}],["item.article",{"_index":694,"title":{},"body":{"components/GetDataComponent.html":{}}}],["item.title",{"_index":692,"title":{},"body":{"components/GetDataComponent.html":{}}}],["item.username",{"_index":690,"title":{},"body":{"components/GetDataComponent.html":{}}}],["items",{"_index":704,"title":{},"body":{"components/GetDataComponent.html":{},"components/NavbarComponent.html":{}}}],["john",{"_index":491,"title":{},"body":{"injectables/CommonService.html":{}}}],["json.parse(atob(base64",{"_index":562,"title":{},"body":{"injectables/CommonService.html":{}}}],["justify",{"_index":705,"title":{},"body":{"components/GetDataComponent.html":{},"components/NavbarComponent.html":{}}}],["jwt",{"_index":461,"title":{},"body":{"injectables/CommonService.html":{},"interfaces/DecodedJWT.html":{}}}],["jwtpayload",{"_index":555,"title":{},"body":{"injectables/CommonService.html":{}}}],["jwtpayload.replace",{"_index":558,"title":{},"body":{"injectables/CommonService.html":{}}}],["keyframes",{"_index":95,"title":{},"body":{"components/AppComponent.html":{}}}],["left",{"_index":163,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{}}}],["legend",{"_index":170,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{},"overview.html":{}}}],["limit",{"_index":665,"title":{},"body":{"components/GetDataComponent.html":{}}}],["limitperpage",{"_index":673,"title":{},"body":{"components/GetDataComponent.html":{}}}],["linear",{"_index":121,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{}}}],["loader",{"_index":41,"title":{},"body":{"components/AppComponent.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["loaderstate",{"_index":485,"title":{},"body":{"injectables/CommonService.html":{}}}],["loaderstatus",{"_index":25,"title":{},"body":{"components/AppComponent.html":{}}}],["loaderstatus]{@link",{"_index":85,"title":{},"body":{"components/AppComponent.html":{}}}],["loadersubject",{"_index":57,"title":{},"body":{"components/AppComponent.html":{},"injectables/CommonService.html":{}}}],["loadersubject]{@link",{"_index":83,"title":{},"body":{"components/AppComponent.html":{},"injectables/CommonService.html":{}}}],["loading",{"_index":91,"title":{},"body":{"components/AppComponent.html":{}}}],["log",{"_index":469,"title":{},"body":{"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["logged",{"_index":49,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthGuard.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/PostDataComponent.html":{}}}],["loggedinuser",{"_index":293,"title":{},"body":{"injectables/AuthGuard.html":{},"injectables/CommonService.html":{},"components/NavbarComponent.html":{}}}],["loggedinuser.charat(0).touppercase",{"_index":747,"title":{},"body":{"components/NavbarComponent.html":{}}}],["loggedinuser.length",{"_index":294,"title":{},"body":{"injectables/AuthGuard.html":{},"components/NavbarComponent.html":{}}}],["loggedinuser.slice(1",{"_index":748,"title":{},"body":{"components/NavbarComponent.html":{}}}],["loggedinusersubject",{"_index":267,"title":{},"body":{"injectables/AuthGuard.html":{},"injectables/CommonService.html":{},"components/NavbarComponent.html":{}}}],["loggedinusersubject.subscribe((loggedinuser",{"_index":511,"title":{},"body":{"injectables/CommonService.html":{}}}],["loggedinusersubject]{@link",{"_index":281,"title":{},"body":{"injectables/AuthGuard.html":{},"injectables/CommonService.html":{},"components/NavbarComponent.html":{}}}],["logger",{"_index":435,"title":{},"body":{"injectables/CommonService.html":{}}}],["logger(`something",{"_index":475,"title":{},"body":{"injectables/CommonService.html":{}}}],["logger(message",{"_index":467,"title":{},"body":{"injectables/CommonService.html":{}}}],["logger(something",{"_index":478,"title":{},"body":{"injectables/CommonService.html":{}}}],["logging",{"_index":290,"title":{},"body":{"injectables/AuthGuard.html":{}}}],["make",{"_index":341,"title":{},"body":{"injectables/BackendService.html":{},"components/GetDataComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["making",{"_index":345,"title":{},"body":{"injectables/BackendService.html":{}}}],["margin",{"_index":93,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["marker",{"_index":365,"title":{},"body":{"injectables/BackendService.html":{},"components/GetDataComponent.html":{}}}],["match",{"_index":454,"title":{},"body":{"injectables/CommonService.html":{}}}],["matches",{"_index":453,"title":{},"body":{"injectables/CommonService.html":{}}}],["matching",{"_index":195,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthGuard.html":{},"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"interfaces/DecodedJWT.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"interfaces/RequestData.html":{},"interfaces/ResponseData.html":{},"interfaces/SignIn.html":{},"interfaces/SignUp.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":143,"title":{},"body":{"components/AppComponent.html":{}}}],["mean",{"_index":285,"title":{},"body":{"injectables/AuthGuard.html":{}}}],["media",{"_index":142,"title":{},"body":{"components/AppComponent.html":{}}}],["message",{"_index":373,"title":{},"body":{"injectables/BackendService.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["message]{@link",{"_index":860,"title":{},"body":{"components/WebSocketComponent.html":{}}}],["messages",{"_index":470,"title":{},"body":{"injectables/CommonService.html":{}}}],["metadata",{"_index":16,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["method",{"_index":44,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthGuard.html":{},"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["methods",{"_index":27,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthGuard.html":{},"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["min",{"_index":713,"title":{},"body":{"components/GetDataComponent.html":{}}}],["miscellaneous",{"_index":944,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["mode",{"_index":474,"title":{},"body":{"injectables/CommonService.html":{}}}],["models/decodedjwt.model",{"_index":528,"title":{},"body":{"injectables/CommonService.html":{}}}],["models/requestdata.model",{"_index":410,"title":{},"body":{"injectables/BackendService.html":{}}}],["models/signin.model",{"_index":408,"title":{},"body":{"injectables/BackendService.html":{}}}],["models/signup.model",{"_index":409,"title":{},"body":{"injectables/BackendService.html":{}}}],["modification",{"_index":325,"title":{},"body":{"interceptors/BackendInterceptor.html":{}}}],["module",{"_index":196,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["modules",{"_index":198,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":633,"title":{},"body":{"components/GetDataComponent.html":{}}}],["multi",{"_index":243,"title":{},"body":{"modules/AppModule.html":{}}}],["name",{"_index":36,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthGuard.html":{},"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["nav",{"_index":755,"title":{},"body":{"components/NavbarComponent.html":{}}}],["navbar",{"_index":731,"title":{},"body":{"components/NavbarComponent.html":{}}}],["navbar'},{'name",{"_index":180,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["navbar.component.css",{"_index":732,"title":{},"body":{"components/NavbarComponent.html":{}}}],["navbar.component.html",{"_index":733,"title":{},"body":{"components/NavbarComponent.html":{}}}],["navbarcomponent",{"_index":179,"title":{"components/NavbarComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{},"coverage.html":{},"overview.html":{}}}],["navigate",{"_index":444,"title":{},"body":{"injectables/CommonService.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"index.html":{}}}],["navigation",{"_index":729,"title":{},"body":{"components/NavbarComponent.html":{}}}],["need",{"_index":328,"title":{},"body":{"interceptors/BackendInterceptor.html":{}}}],["needed",{"_index":781,"title":{},"body":{"components/PostDataComponent.html":{}}}],["new",{"_index":400,"title":{},"body":{"injectables/BackendService.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/PostDataComponent.html":{},"components/SignupComponent.html":{},"coverage.html":{}}}],["next",{"_index":292,"title":{},"body":{"injectables/AuthGuard.html":{},"interceptors/BackendInterceptor.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["next.handle",{"_index":334,"title":{},"body":{"interceptors/BackendInterceptor.html":{}}}],["next.handle(request",{"_index":322,"title":{},"body":{"interceptors/BackendInterceptor.html":{}}}],["ng",{"_index":916,"title":{},"body":{"index.html":{}}}],["ngmodule",{"_index":217,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["ngondestroy",{"_index":600,"title":{},"body":{"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["ngoninit",{"_index":28,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/WebSocketComponent.html":{}}}],["node",{"_index":904,"title":{},"body":{"index.html":{}}}],["normally",{"_index":383,"title":{},"body":{"injectables/BackendService.html":{}}}],["notification",{"_index":498,"title":{},"body":{"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["notification'},{'name",{"_index":182,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["notification.component.css",{"_index":762,"title":{},"body":{"components/NotificationComponent.html":{}}}],["notification.component.html",{"_index":763,"title":{},"body":{"components/NotificationComponent.html":{}}}],["notificationcomponent",{"_index":181,"title":{"components/NotificationComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{},"coverage.html":{},"overview.html":{}}}],["notificationsubject",{"_index":432,"title":{},"body":{"injectables/CommonService.html":{},"components/NotificationComponent.html":{}}}],["notificationsubject.subscribe((notification",{"_index":515,"title":{},"body":{"injectables/CommonService.html":{}}}],["notificationsubject]{@link",{"_index":532,"title":{},"body":{"injectables/CommonService.html":{},"components/NotificationComponent.html":{}}}],["notified",{"_index":677,"title":{},"body":{"components/GetDataComponent.html":{},"components/PostDataComponent.html":{}}}],["npm",{"_index":918,"title":{},"body":{"index.html":{}}}],["number",{"_index":358,"title":{},"body":{"injectables/BackendService.html":{},"interfaces/DecodedJWT.html":{},"components/GetDataComponent.html":{}}}],["object",{"_index":844,"title":{},"body":{"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["observable",{"_index":268,"title":{},"body":{"injectables/AuthGuard.html":{},"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{}}}],["observables",{"_index":430,"title":{},"body":{"injectables/CommonService.html":{}}}],["observe",{"_index":394,"title":{},"body":{"injectables/BackendService.html":{}}}],["occurs",{"_index":457,"title":{},"body":{"injectables/CommonService.html":{}}}],["offset",{"_index":364,"title":{},"body":{"injectables/BackendService.html":{},"components/GetDataComponent.html":{}}}],["offset=${currentoffset",{"_index":423,"title":{},"body":{"injectables/BackendService.html":{}}}],["ondestroy",{"_index":594,"title":{},"body":{"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["oninit",{"_index":15,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/WebSocketComponent.html":{}}}],["opened",{"_index":580,"title":{},"body":{"injectables/CommonService.html":{}}}],["option",{"_index":395,"title":{},"body":{"injectables/BackendService.html":{}}}],["optional",{"_index":38,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthGuard.html":{},"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"interfaces/SignUp.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["out",{"_index":214,"title":{},"body":{"modules/AppModule.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/PostDataComponent.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["overview",{"_index":938,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":883,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["padding",{"_index":167,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{}}}],["page",{"_index":51,"title":{},"body":{"components/AppComponent.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"index.html":{}}}],["pages",{"_index":446,"title":{},"body":{"injectables/CommonService.html":{}}}],["pagination",{"_index":361,"title":{},"body":{"injectables/BackendService.html":{}}}],["param",{"_index":81,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthGuard.html":{},"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["parameter",{"_index":369,"title":{},"body":{"injectables/BackendService.html":{},"injectables/CommonService.html":{}}}],["parameters",{"_index":34,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthGuard.html":{},"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["passed",{"_index":367,"title":{},"body":{"injectables/BackendService.html":{}}}],["password",{"_index":798,"title":{},"body":{"interfaces/SignIn.html":{},"interfaces/SignUp.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["path",{"_index":252,"title":{},"body":{"modules/AppRoutingModule.html":{},"miscellaneous/variables.html":{}}}],["per",{"_index":666,"title":{},"body":{"components/GetDataComponent.html":{}}}],["picked",{"_index":403,"title":{},"body":{"injectables/BackendService.html":{}}}],["pipe",{"_index":656,"title":{},"body":{"components/GetDataComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["pm",{"_index":688,"title":{},"body":{"components/GetDataComponent.html":{}}}],["pointer",{"_index":753,"title":{},"body":{"components/NavbarComponent.html":{}}}],["position",{"_index":150,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{}}}],["post",{"_index":184,"title":{},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthGuard.html":{},"injectables/BackendService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["postdata",{"_index":959,"title":{},"body":{"miscellaneous/variables.html":{}}}],["postdatacomponent",{"_index":183,"title":{"components/PostDataComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{},"coverage.html":{},"overview.html":{}}}],["posting",{"_index":960,"title":{},"body":{"miscellaneous/variables.html":{}}}],["present",{"_index":450,"title":{},"body":{"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["private",{"_index":530,"title":{},"body":{"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["production",{"_index":473,"title":{},"body":{"injectables/CommonService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["progress",{"_index":623,"title":{},"body":{"components/GetDataComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["project",{"_index":897,"title":{},"body":{"index.html":{}}}],["properties",{"_index":24,"title":{"properties.html":{}},"body":{"components/AppComponent.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"interfaces/DecodedJWT.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"interfaces/RequestData.html":{},"interfaces/ResponseData.html":{},"interfaces/SignIn.html":{},"interfaces/SignUp.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{},"properties.html":{}}}],["protect",{"_index":265,"title":{},"body":{"injectables/AuthGuard.html":{}}}],["provide",{"_index":241,"title":{},"body":{"modules/AppModule.html":{}}}],["provided",{"_index":792,"title":{},"body":{"interfaces/RequestData.html":{}}}],["providedin",{"_index":414,"title":{},"body":{"injectables/BackendService.html":{},"injectables/CommonService.html":{}}}],["providers",{"_index":202,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["query",{"_index":368,"title":{},"body":{"injectables/BackendService.html":{}}}],["received",{"_index":628,"title":{},"body":{"components/GetDataComponent.html":{},"components/SigninComponent.html":{},"components/WebSocketComponent.html":{}}}],["redirectto",{"_index":257,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["refresh",{"_index":52,"title":{},"body":{"components/AppComponent.html":{}}}],["refreshed",{"_index":582,"title":{},"body":{"injectables/CommonService.html":{}}}],["relative",{"_index":151,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{}}}],["reload",{"_index":922,"title":{},"body":{"index.html":{}}}],["replace('am",{"_index":686,"title":{},"body":{"components/GetDataComponent.html":{}}}],["replace('pm",{"_index":687,"title":{},"body":{"components/GetDataComponent.html":{}}}],["replace(/_/g",{"_index":560,"title":{},"body":{"injectables/CommonService.html":{}}}],["request",{"_index":315,"title":{},"body":{"interceptors/BackendInterceptor.html":{}}}],["request.clone",{"_index":335,"title":{},"body":{"interceptors/BackendInterceptor.html":{}}}],["request.url.includes('signin",{"_index":329,"title":{},"body":{"interceptors/BackendInterceptor.html":{}}}],["request.url.includes('signup",{"_index":330,"title":{},"body":{"interceptors/BackendInterceptor.html":{}}}],["requestdata",{"_index":376,"title":{"interfaces/RequestData.html":{}},"body":{"injectables/BackendService.html":{},"components/PostDataComponent.html":{},"interfaces/RequestData.html":{},"coverage.html":{}}}],["requests",{"_index":333,"title":{},"body":{"interceptors/BackendInterceptor.html":{}}}],["required",{"_index":389,"title":{},"body":{"injectables/BackendService.html":{}}}],["reset",{"_index":213,"title":{},"body":{"modules/AppModule.html":{},"components/GetDataComponent.html":{},"overview.html":{}}}],["resetting",{"_index":540,"title":{},"body":{"injectables/CommonService.html":{}}}],["response",{"_index":370,"title":{},"body":{"injectables/BackendService.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/PostDataComponent.html":{},"interfaces/ResponseData.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["response.data.docs",{"_index":660,"title":{},"body":{"components/GetDataComponent.html":{}}}],["response.data.totaldocs",{"_index":676,"title":{},"body":{"components/GetDataComponent.html":{}}}],["response.data?.limit",{"_index":674,"title":{},"body":{"components/GetDataComponent.html":{}}}],["response.headers.get",{"_index":821,"title":{},"body":{"components/SigninComponent.html":{}}}],["response.headers.get('authorization",{"_index":846,"title":{},"body":{"components/SignupComponent.html":{}}}],["response?.body?.message",{"_index":827,"title":{},"body":{"components/SigninComponent.html":{}}}],["response?.message",{"_index":662,"title":{},"body":{"components/GetDataComponent.html":{},"components/PostDataComponent.html":{},"components/SignupComponent.html":{}}}],["responsedata",{"_index":642,"title":{"interfaces/ResponseData.html":{}},"body":{"components/GetDataComponent.html":{},"interfaces/ResponseData.html":{},"coverage.html":{}}}],["results",{"_index":194,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthGuard.html":{},"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"interfaces/DecodedJWT.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"interfaces/RequestData.html":{},"interfaces/ResponseData.html":{},"interfaces/SignIn.html":{},"interfaces/SignUp.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["retro",{"_index":92,"title":{},"body":{"components/AppComponent.html":{}}}],["return",{"_index":274,"title":{},"body":{"injectables/AuthGuard.html":{},"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/PostDataComponent.html":{}}}],["returned",{"_index":385,"title":{},"body":{"injectables/BackendService.html":{},"injectables/CommonService.html":{}}}],["returning",{"_index":279,"title":{},"body":{"injectables/AuthGuard.html":{},"injectables/CommonService.html":{}}}],["returns",{"_index":58,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthGuard.html":{},"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["reverse",{"_index":138,"title":{},"body":{"components/AppComponent.html":{}}}],["right",{"_index":717,"title":{},"body":{"components/GetDataComponent.html":{}}}],["root",{"_index":12,"title":{},"body":{"components/AppComponent.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{}}}],["root'},{'name",{"_index":176,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["rotate",{"_index":102,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{}}}],["rotate(0deg",{"_index":99,"title":{},"body":{"components/AppComponent.html":{}}}],["rotate(1.8deg",{"_index":722,"title":{},"body":{"components/GetDataComponent.html":{}}}],["rotate(8.5deg",{"_index":714,"title":{},"body":{"components/GetDataComponent.html":{}}}],["route",{"_index":275,"title":{},"body":{"injectables/AuthGuard.html":{}}}],["router",{"_index":442,"title":{},"body":{"injectables/CommonService.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["routerlink",{"_index":746,"title":{},"body":{"components/NavbarComponent.html":{}}}],["routerlink]=\"'/get",{"_index":750,"title":{},"body":{"components/NavbarComponent.html":{}}}],["routerlink]=\"'/post",{"_index":751,"title":{},"body":{"components/NavbarComponent.html":{}}}],["routerlink]=\"\\'/get",{"_index":759,"title":{},"body":{"components/NavbarComponent.html":{}}}],["routerlink]=\"\\'/post",{"_index":760,"title":{},"body":{"components/NavbarComponent.html":{}}}],["routermodule",{"_index":246,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routermodule.forroot(routes",{"_index":258,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routerstatesnapshot",{"_index":272,"title":{},"body":{"injectables/AuthGuard.html":{}}}],["routes",{"_index":247,"title":{"routes.html":{}},"body":{"modules/AppRoutingModule.html":{},"injectables/AuthGuard.html":{},"overview.html":{},"routes.html":{}}}],["routing.module",{"_index":220,"title":{},"body":{"modules/AppModule.html":{}}}],["routing.module.ts",{"_index":245,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["run",{"_index":915,"title":{},"body":{"index.html":{}}}],["running",{"_index":914,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":321,"title":{},"body":{"interceptors/BackendInterceptor.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"dependencies.html":{}}}],["screen",{"_index":66,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthGuard.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["security",{"_index":452,"title":{},"body":{"injectables/CommonService.html":{}}}],["see",{"_index":932,"title":{},"body":{"index.html":{}}}],["selector",{"_index":17,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["send",{"_index":323,"title":{},"body":{"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"components/PostDataComponent.html":{}}}],["sending",{"_index":778,"title":{},"body":{"components/PostDataComponent.html":{}}}],["sennd",{"_index":779,"title":{},"body":{"components/PostDataComponent.html":{}}}],["sent",{"_index":316,"title":{},"body":{"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["serve",{"_index":917,"title":{},"body":{"index.html":{}}}],["server",{"_index":905,"title":{},"body":{"index.html":{}}}],["serves",{"_index":903,"title":{},"body":{"index.html":{}}}],["service",{"_index":264,"title":{},"body":{"injectables/AuthGuard.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{}}}],["services/auth.guard",{"_index":237,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["services/backend.interceptor",{"_index":236,"title":{},"body":{"modules/AppModule.html":{}}}],["services/common.service",{"_index":76,"title":{},"body":{"components/AppComponent.html":{}}}],["session",{"_index":309,"title":{},"body":{"interceptors/BackendInterceptor.html":{},"injectables/CommonService.html":{}}}],["sessionstorage.getitem",{"_index":573,"title":{},"body":{"injectables/CommonService.html":{}}}],["sessionstorage.getitem('username",{"_index":569,"title":{},"body":{"injectables/CommonService.html":{}}}],["sessionstorage.getitem(appconstant.authorizationheaderkey",{"_index":537,"title":{},"body":{"injectables/CommonService.html":{}}}],["sessionstorage.removeitem('username",{"_index":548,"title":{},"body":{"injectables/CommonService.html":{}}}],["sessionstorage.removeitem(appconstant.authorizationheaderkey",{"_index":547,"title":{},"body":{"injectables/CommonService.html":{}}}],["sessionstorage.setitem('username",{"_index":568,"title":{},"body":{"injectables/CommonService.html":{}}}],["sessionstorage.setitem(appconstant.authorizationheaderkey",{"_index":536,"title":{},"body":{"injectables/CommonService.html":{}}}],["sessionstoragetoken",{"_index":572,"title":{},"body":{"injectables/CommonService.html":{}}}],["sessionstorageusername",{"_index":575,"title":{},"body":{"injectables/CommonService.html":{}}}],["set",{"_index":391,"title":{},"body":{"injectables/BackendService.html":{},"injectables/CommonService.html":{}}}],["setheaders",{"_index":336,"title":{},"body":{"interceptors/BackendInterceptor.html":{}}}],["settimeout",{"_index":774,"title":{},"body":{"components/NotificationComponent.html":{}}}],["setting",{"_index":393,"title":{},"body":{"injectables/BackendService.html":{},"injectables/CommonService.html":{}}}],["settings",{"_index":113,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{}}}],["settoken(token",{"_index":520,"title":{},"body":{"injectables/CommonService.html":{}}}],["setusername(username",{"_index":524,"title":{},"body":{"injectables/CommonService.html":{}}}],["shadow",{"_index":101,"title":{},"body":{"components/AppComponent.html":{}}}],["shared",{"_index":429,"title":{},"body":{"injectables/CommonService.html":{}}}],["show",{"_index":65,"title":{},"body":{"components/AppComponent.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["shown",{"_index":67,"title":{},"body":{"components/AppComponent.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NotificationComponent.html":{}}}],["sign",{"_index":326,"title":{},"body":{"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/PostDataComponent.html":{},"interfaces/SignIn.html":{},"interfaces/SignUp.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["signed",{"_index":449,"title":{},"body":{"injectables/CommonService.html":{}}}],["signin",{"_index":253,"title":{"interfaces/SignIn.html":{}},"body":{"modules/AppRoutingModule.html":{},"injectables/BackendService.html":{},"interfaces/SignIn.html":{},"components/SigninComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signin'},{'name",{"_index":186,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["signin.component.css",{"_index":803,"title":{},"body":{"components/SigninComponent.html":{}}}],["signin.component.html",{"_index":804,"title":{},"body":{"components/SigninComponent.html":{}}}],["signinagain",{"_index":961,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signincomponent",{"_index":185,"title":{"components/SigninComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{},"coverage.html":{},"overview.html":{}}}],["signing",{"_index":957,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signout",{"_index":436,"title":{},"body":{"injectables/CommonService.html":{},"miscellaneous/variables.html":{}}}],["signout]{@link",{"_index":551,"title":{},"body":{"injectables/CommonService.html":{}}}],["signs",{"_index":380,"title":{},"body":{"injectables/BackendService.html":{}}}],["signup",{"_index":254,"title":{"interfaces/SignUp.html":{}},"body":{"modules/AppRoutingModule.html":{},"injectables/BackendService.html":{},"interfaces/SignUp.html":{},"components/SignupComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signup'},{'name",{"_index":188,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["signup.component.css",{"_index":831,"title":{},"body":{"components/SignupComponent.html":{}}}],["signup.component.html",{"_index":832,"title":{},"body":{"components/SignupComponent.html":{}}}],["signupcomponent",{"_index":187,"title":{"components/SignupComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{},"coverage.html":{},"overview.html":{}}}],["single",{"_index":908,"title":{},"body":{"index.html":{}}}],["size",{"_index":109,"title":{},"body":{"components/AppComponent.html":{}}}],["socket",{"_index":191,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["socket.component",{"_index":240,"title":{},"body":{"modules/AppModule.html":{}}}],["socket.component.css",{"_index":852,"title":{},"body":{"components/WebSocketComponent.html":{}}}],["socket.component.html",{"_index":853,"title":{},"body":{"components/WebSocketComponent.html":{}}}],["socket.component.ts",{"_index":850,"title":{},"body":{"components/WebSocketComponent.html":{},"coverage.html":{}}}],["socket.component.ts:11",{"_index":854,"title":{},"body":{"components/WebSocketComponent.html":{}}}],["socket.component.ts:23",{"_index":857,"title":{},"body":{"components/WebSocketComponent.html":{}}}],["socket.component.ts:30",{"_index":855,"title":{},"body":{"components/WebSocketComponent.html":{}}}],["socket/web",{"_index":239,"title":{},"body":{"modules/AppModule.html":{},"components/WebSocketComponent.html":{},"coverage.html":{}}}],["solid",{"_index":698,"title":{},"body":{"components/GetDataComponent.html":{}}}],["something",{"_index":477,"title":{},"body":{"injectables/CommonService.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/AuthGuard.html":{},"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"interfaces/DecodedJWT.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"interfaces/RequestData.html":{},"interfaces/ResponseData.html":{},"interfaces/SignIn.html":{},"interfaces/SignUp.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{},"index.html":{}}}],["span",{"_index":139,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{}}}],["src/.../apipath.constant.ts",{"_index":946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.constant.ts",{"_index":947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.development.ts",{"_index":948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.production.ts",{"_index":949,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":950,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app",{"_index":244,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.ts",{"_index":10,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:13",{"_index":33,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:25",{"_index":64,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:31",{"_index":71,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:36",{"_index":43,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.module.ts",{"_index":215,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/components/get",{"_index":592,"title":{},"body":{"components/GetDataComponent.html":{},"coverage.html":{}}}],["src/app/components/navbar/navbar.component.ts",{"_index":728,"title":{},"body":{"components/NavbarComponent.html":{},"coverage.html":{}}}],["src/app/components/navbar/navbar.component.ts:13",{"_index":735,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/components/navbar/navbar.component.ts:24",{"_index":741,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/components/navbar/navbar.component.ts:31",{"_index":742,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/components/navbar/navbar.component.ts:36",{"_index":740,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/components/navbar/navbar.component.ts:43",{"_index":738,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/components/navbar/navbar.component.ts:52",{"_index":736,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/components/navbar/navbar.component.ts:67",{"_index":739,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/components/notification/notification.component.ts",{"_index":761,"title":{},"body":{"components/NotificationComponent.html":{},"coverage.html":{}}}],["src/app/components/notification/notification.component.ts:14",{"_index":764,"title":{},"body":{"components/NotificationComponent.html":{}}}],["src/app/components/notification/notification.component.ts:26",{"_index":768,"title":{},"body":{"components/NotificationComponent.html":{}}}],["src/app/components/notification/notification.component.ts:33",{"_index":769,"title":{},"body":{"components/NotificationComponent.html":{}}}],["src/app/components/notification/notification.component.ts:38",{"_index":766,"title":{},"body":{"components/NotificationComponent.html":{}}}],["src/app/components/notification/notification.component.ts:55",{"_index":765,"title":{},"body":{"components/NotificationComponent.html":{}}}],["src/app/components/post",{"_index":776,"title":{},"body":{"components/PostDataComponent.html":{},"coverage.html":{}}}],["src/app/components/signin/signin.component.ts",{"_index":802,"title":{},"body":{"components/SigninComponent.html":{},"coverage.html":{}}}],["src/app/components/signin/signin.component.ts:104",{"_index":809,"title":{},"body":{"components/SigninComponent.html":{}}}],["src/app/components/signin/signin.component.ts:17",{"_index":805,"title":{},"body":{"components/SigninComponent.html":{}}}],["src/app/components/signin/signin.component.ts:35",{"_index":812,"title":{},"body":{"components/SigninComponent.html":{}}}],["src/app/components/signin/signin.component.ts:42",{"_index":810,"title":{},"body":{"components/SigninComponent.html":{}}}],["src/app/components/signin/signin.component.ts:49",{"_index":811,"title":{},"body":{"components/SigninComponent.html":{}}}],["src/app/components/signin/signin.component.ts:58",{"_index":808,"title":{},"body":{"components/SigninComponent.html":{}}}],["src/app/components/signup/signup.component.ts",{"_index":829,"title":{},"body":{"components/SignupComponent.html":{},"coverage.html":{}}}],["src/app/components/signup/signup.component.ts:109",{"_index":836,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/components/signup/signup.component.ts:17",{"_index":833,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/components/signup/signup.component.ts:35",{"_index":840,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/components/signup/signup.component.ts:42",{"_index":838,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/components/signup/signup.component.ts:50",{"_index":837,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/components/signup/signup.component.ts:57",{"_index":839,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/components/signup/signup.component.ts:66",{"_index":834,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/components/web",{"_index":849,"title":{},"body":{"components/WebSocketComponent.html":{},"coverage.html":{}}}],["src/app/models/decodedjwt.model.ts",{"_index":587,"title":{},"body":{"interfaces/DecodedJWT.html":{},"coverage.html":{}}}],["src/app/models/requestdata.model",{"_index":784,"title":{},"body":{"components/PostDataComponent.html":{}}}],["src/app/models/requestdata.model.ts",{"_index":791,"title":{},"body":{"interfaces/RequestData.html":{},"coverage.html":{}}}],["src/app/models/responsedata.model",{"_index":646,"title":{},"body":{"components/GetDataComponent.html":{}}}],["src/app/models/responsedata.model.ts",{"_index":793,"title":{},"body":{"interfaces/ResponseData.html":{},"coverage.html":{}}}],["src/app/models/signin.model",{"_index":813,"title":{},"body":{"components/SigninComponent.html":{}}}],["src/app/models/signin.model.ts",{"_index":797,"title":{},"body":{"interfaces/SignIn.html":{},"coverage.html":{}}}],["src/app/models/signup.model",{"_index":841,"title":{},"body":{"components/SignupComponent.html":{}}}],["src/app/models/signup.model.ts",{"_index":799,"title":{},"body":{"interfaces/SignUp.html":{},"coverage.html":{}}}],["src/app/services/auth.guard.ts",{"_index":261,"title":{},"body":{"injectables/AuthGuard.html":{},"coverage.html":{}}}],["src/app/services/auth.guard.ts:10",{"_index":266,"title":{},"body":{"injectables/AuthGuard.html":{}}}],["src/app/services/auth.guard.ts:24",{"_index":273,"title":{},"body":{"injectables/AuthGuard.html":{}}}],["src/app/services/backend.interceptor.ts",{"_index":298,"title":{},"body":{"interceptors/BackendInterceptor.html":{},"coverage.html":{}}}],["src/app/services/backend.interceptor.ts:15",{"_index":308,"title":{},"body":{"interceptors/BackendInterceptor.html":{}}}],["src/app/services/backend.interceptor.ts:27",{"_index":314,"title":{},"body":{"interceptors/BackendInterceptor.html":{}}}],["src/app/services/backend.service",{"_index":647,"title":{},"body":{"components/GetDataComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["src/app/services/backend.service.ts",{"_index":340,"title":{},"body":{"injectables/BackendService.html":{},"coverage.html":{}}}],["src/app/services/backend.service.ts:16",{"_index":356,"title":{},"body":{"injectables/BackendService.html":{}}}],["src/app/services/backend.service.ts:27",{"_index":402,"title":{},"body":{"injectables/BackendService.html":{}}}],["src/app/services/backend.service.ts:33",{"_index":405,"title":{},"body":{"injectables/BackendService.html":{}}}],["src/app/services/backend.service.ts:40",{"_index":379,"title":{},"body":{"injectables/BackendService.html":{}}}],["src/app/services/backend.service.ts:55",{"_index":398,"title":{},"body":{"injectables/BackendService.html":{}}}],["src/app/services/backend.service.ts:69",{"_index":396,"title":{},"body":{"injectables/BackendService.html":{}}}],["src/app/services/backend.service.ts:80",{"_index":359,"title":{},"body":{"injectables/BackendService.html":{}}}],["src/app/services/backend.service.ts:90",{"_index":377,"title":{},"body":{"injectables/BackendService.html":{}}}],["src/app/services/backend.service.ts:97",{"_index":372,"title":{},"body":{"injectables/BackendService.html":{}}}],["src/app/services/common.service",{"_index":648,"title":{},"body":{"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["src/app/services/common.service.ts",{"_index":427,"title":{},"body":{"injectables/CommonService.html":{},"coverage.html":{}}}],["src/app/services/common.service.ts:107",{"_index":519,"title":{},"body":{"injectables/CommonService.html":{}}}],["src/app/services/common.service.ts:114",{"_index":481,"title":{},"body":{"injectables/CommonService.html":{}}}],["src/app/services/common.service.ts:137",{"_index":460,"title":{},"body":{"injectables/CommonService.html":{}}}],["src/app/services/common.service.ts:15",{"_index":443,"title":{},"body":{"injectables/CommonService.html":{}}}],["src/app/services/common.service.ts:174",{"_index":525,"title":{},"body":{"injectables/CommonService.html":{}}}],["src/app/services/common.service.ts:183",{"_index":523,"title":{},"body":{"injectables/CommonService.html":{}}}],["src/app/services/common.service.ts:192",{"_index":448,"title":{},"body":{"injectables/CommonService.html":{}}}],["src/app/services/common.service.ts:241",{"_index":468,"title":{},"body":{"injectables/CommonService.html":{}}}],["src/app/services/common.service.ts:27",{"_index":505,"title":{},"body":{"injectables/CommonService.html":{}}}],["src/app/services/common.service.ts:31",{"_index":509,"title":{},"body":{"injectables/CommonService.html":{}}}],["src/app/services/common.service.ts:39",{"_index":484,"title":{},"body":{"injectables/CommonService.html":{}}}],["src/app/services/common.service.ts:51",{"_index":514,"title":{},"body":{"injectables/CommonService.html":{}}}],["src/app/services/common.service.ts:57",{"_index":517,"title":{},"body":{"injectables/CommonService.html":{}}}],["src/app/services/common.service.ts:65",{"_index":497,"title":{},"body":{"injectables/CommonService.html":{}}}],["src/app/services/common.service.ts:77",{"_index":510,"title":{},"body":{"injectables/CommonService.html":{}}}],["src/app/services/common.service.ts:83",{"_index":513,"title":{},"body":{"injectables/CommonService.html":{}}}],["src/app/services/common.service.ts:91",{"_index":488,"title":{},"body":{"injectables/CommonService.html":{}}}],["src/app/services/common.service.ts:99",{"_index":521,"title":{},"body":{"injectables/CommonService.html":{}}}],["src/constants/apipath.constant",{"_index":412,"title":{},"body":{"injectables/BackendService.html":{}}}],["src/constants/apipath.constant.ts",{"_index":875,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/constants/app.constant",{"_index":78,"title":{},"body":{"components/AppComponent.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["src/constants/app.constant.ts",{"_index":877,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment",{"_index":407,"title":{},"body":{"injectables/BackendService.html":{},"injectables/CommonService.html":{}}}],["src/environments/environment.development.ts",{"_index":878,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.production.ts",{"_index":879,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":880,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["started",{"_index":894,"title":{"index.html":{}},"body":{}}],["state",{"_index":271,"title":{},"body":{"injectables/AuthGuard.html":{},"injectables/CommonService.html":{}}}],["statements",{"_index":864,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":42,"title":{},"body":{"components/AppComponent.html":{}}}],["storage",{"_index":310,"title":{},"body":{"interceptors/BackendInterceptor.html":{},"injectables/CommonService.html":{}}}],["stored",{"_index":287,"title":{},"body":{"injectables/AuthGuard.html":{}}}],["string",{"_index":69,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthGuard.html":{},"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"interfaces/DecodedJWT.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"interfaces/RequestData.html":{},"interfaces/ResponseData.html":{},"interfaces/SignIn.html":{},"interfaces/SignUp.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["strive",{"_index":912,"title":{},"body":{"index.html":{}}}],["style=\"cursor",{"_index":752,"title":{},"body":{"components/NavbarComponent.html":{}}}],["styles",{"_index":6,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["styleurls",{"_index":19,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["subject",{"_index":506,"title":{},"body":{"injectables/CommonService.html":{}}}],["subscribe",{"_index":56,"title":{},"body":{"components/AppComponent.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["subscribes",{"_index":627,"title":{},"body":{"components/GetDataComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["subscribing",{"_index":284,"title":{},"body":{"injectables/AuthGuard.html":{}}}],["subscription",{"_index":598,"title":{},"body":{"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["subsequent",{"_index":366,"title":{},"body":{"injectables/BackendService.html":{},"components/GetDataComponent.html":{}}}],["success",{"_index":956,"title":{},"body":{"miscellaneous/variables.html":{}}}],["successful",{"_index":807,"title":{},"body":{"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["support",{"_index":933,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":934,"title":{},"body":{"modules.html":{}}}],["tab",{"_index":73,"title":{},"body":{"components/AppComponent.html":{},"injectables/CommonService.html":{}}}],["table",{"_index":882,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":881,"title":{},"body":{"coverage.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["templateurl",{"_index":21,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["test",{"_index":909,"title":{},"body":{"index.html":{}}}],["text",{"_index":100,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{}}}],["therefore",{"_index":392,"title":{},"body":{"injectables/BackendService.html":{},"injectables/CommonService.html":{}}}],["this.article",{"_index":788,"title":{},"body":{"components/PostDataComponent.html":{}}}],["this.backendservice",{"_index":654,"title":{},"body":{"components/GetDataComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["this.backendurl",{"_index":416,"title":{},"body":{"injectables/BackendService.html":{}}}],["this.buttontext",{"_index":672,"title":{},"body":{"components/GetDataComponent.html":{}}}],["this.checkisloggedin",{"_index":743,"title":{},"body":{"components/NavbarComponent.html":{}}}],["this.commonservice.checksavedcredentials",{"_index":86,"title":{},"body":{"components/AppComponent.html":{}}}],["this.commonservice.decodetoken(accesstoken",{"_index":822,"title":{},"body":{"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["this.commonservice.loadersubject$.subscribe((loaderstatus",{"_index":87,"title":{},"body":{"components/AppComponent.html":{}}}],["this.commonservice.loggedinusersubject.subscribe",{"_index":291,"title":{},"body":{"injectables/AuthGuard.html":{},"components/NavbarComponent.html":{}}}],["this.commonservice.logger(decodedtoken",{"_index":823,"title":{},"body":{"components/SigninComponent.html":{}}}],["this.commonservice.logger(error",{"_index":295,"title":{},"body":{"injectables/AuthGuard.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["this.commonservice.logger(response",{"_index":789,"title":{},"body":{"components/PostDataComponent.html":{}}}],["this.commonservice.logger(response.data.docs",{"_index":658,"title":{},"body":{"components/GetDataComponent.html":{}}}],["this.commonservice.notificationsubject$.subscribe",{"_index":771,"title":{},"body":{"components/NotificationComponent.html":{}}}],["this.commonservice.signout",{"_index":682,"title":{},"body":{"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/PostDataComponent.html":{}}}],["this.commonservice.token",{"_index":331,"title":{},"body":{"interceptors/BackendInterceptor.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["this.commonservice.updateloadersubject(false",{"_index":657,"title":{},"body":{"components/GetDataComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["this.commonservice.updateloadersubject(true",{"_index":652,"title":{},"body":{"components/GetDataComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["this.commonservice.updatenotificationsubject",{"_index":661,"title":{},"body":{"components/GetDataComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["this.commonservice.username",{"_index":824,"title":{},"body":{"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["this.currentoffset",{"_index":675,"title":{},"body":{"components/GetDataComponent.html":{}}}],["this.data",{"_index":659,"title":{},"body":{"components/GetDataComponent.html":{}}}],["this.decodetoken",{"_index":577,"title":{},"body":{"injectables/CommonService.html":{}}}],["this.email",{"_index":845,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.httpclient.get",{"_index":421,"title":{},"body":{"injectables/BackendService.html":{}}}],["this.httpclient.get(this.backendurl",{"_index":419,"title":{},"body":{"injectables/BackendService.html":{}}}],["this.httpclient.post",{"_index":415,"title":{},"body":{"injectables/BackendService.html":{}}}],["this.httpclient.post(this.backendurl",{"_index":424,"title":{},"body":{"injectables/BackendService.html":{}}}],["this.loaderstatus",{"_index":88,"title":{},"body":{"components/AppComponent.html":{}}}],["this.loadersubject.asobservable",{"_index":508,"title":{},"body":{"injectables/CommonService.html":{}}}],["this.loadersubject.next(loaderstate",{"_index":531,"title":{},"body":{"injectables/CommonService.html":{}}}],["this.loggedinuser",{"_index":745,"title":{},"body":{"components/NavbarComponent.html":{}}}],["this.loggedinusersubject.asobservable",{"_index":512,"title":{},"body":{"injectables/CommonService.html":{}}}],["this.loggedinusersubject.next(loggedinuser",{"_index":534,"title":{},"body":{"injectables/CommonService.html":{}}}],["this.logger(error",{"_index":565,"title":{},"body":{"injectables/CommonService.html":{}}}],["this.notification",{"_index":772,"title":{},"body":{"components/NotificationComponent.html":{}}}],["this.notificationsubject.asobservable",{"_index":516,"title":{},"body":{"injectables/CommonService.html":{}}}],["this.notificationsubject.next(notification",{"_index":533,"title":{},"body":{"injectables/CommonService.html":{}}}],["this.password",{"_index":819,"title":{},"body":{"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["this.router.navigate(['/get",{"_index":826,"title":{},"body":{"components/SigninComponent.html":{}}}],["this.router.navigate(['/post",{"_index":847,"title":{},"body":{"components/SignupComponent.html":{}}}],["this.router.navigate(['/signin",{"_index":549,"title":{},"body":{"injectables/CommonService.html":{}}}],["this.signout",{"_index":564,"title":{},"body":{"injectables/CommonService.html":{}}}],["this.subscription",{"_index":653,"title":{},"body":{"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["this.subscription.unsubscribe",{"_index":689,"title":{},"body":{"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["this.title",{"_index":787,"title":{},"body":{"components/PostDataComponent.html":{}}}],["this.token",{"_index":545,"title":{},"body":{"injectables/CommonService.html":{}}}],["this.updateloadersubject(false",{"_index":550,"title":{},"body":{"injectables/CommonService.html":{}}}],["this.updateloadersubject(true",{"_index":541,"title":{},"body":{"injectables/CommonService.html":{}}}],["this.updateloggedinusersubject(username",{"_index":567,"title":{},"body":{"injectables/CommonService.html":{}}}],["this.updatenotificationsubject",{"_index":542,"title":{},"body":{"injectables/CommonService.html":{}}}],["this.username",{"_index":546,"title":{},"body":{"injectables/CommonService.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["throughout",{"_index":431,"title":{},"body":{"injectables/CommonService.html":{}}}],["time",{"_index":589,"title":{},"body":{"interfaces/DecodedJWT.html":{},"components/NotificationComponent.html":{}}}],["title",{"_index":26,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/PostDataComponent.html":{},"interfaces/RequestData.html":{},"interfaces/ResponseData.html":{}}}],["token",{"_index":305,"title":{},"body":{"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["token(token",{"_index":535,"title":{},"body":{"injectables/CommonService.html":{}}}],["token.split",{"_index":338,"title":{},"body":{"interceptors/BackendInterceptor.html":{}}}],["token.split('.')[1",{"_index":556,"title":{},"body":{"injectables/CommonService.html":{}}}],["token]{@link",{"_index":570,"title":{},"body":{"injectables/CommonService.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["tolocalestring('en",{"_index":685,"title":{},"body":{"components/GetDataComponent.html":{}}}],["top",{"_index":165,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{}}}],["total",{"_index":670,"title":{},"body":{"components/GetDataComponent.html":{}}}],["transform",{"_index":156,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{}}}],["transparent",{"_index":128,"title":{},"body":{"components/AppComponent.html":{}}}],["tree",{"_index":8,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["true",{"_index":68,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"injectables/AuthGuard.html":{},"injectables/CommonService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":455,"title":{},"body":{"injectables/CommonService.html":{},"components/GetDataComponent.html":{}}}],["trying",{"_index":278,"title":{},"body":{"injectables/AuthGuard.html":{},"injectables/CommonService.html":{}}}],["tslib",{"_index":890,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":37,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthGuard.html":{},"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"interfaces/DecodedJWT.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"interfaces/RequestData.html":{},"interfaces/ResponseData.html":{},"interfaces/SignIn.html":{},"interfaces/SignUp.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typography",{"_index":105,"title":{},"body":{"components/AppComponent.html":{}}}],["undefined",{"_index":801,"title":{},"body":{"interfaces/SignUp.html":{},"components/SignupComponent.html":{}}}],["unsubscribe",{"_index":639,"title":{},"body":{"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["until",{"_index":667,"title":{},"body":{"components/GetDataComponent.html":{}}}],["up",{"_index":327,"title":{},"body":{"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"components/NavbarComponent.html":{},"interfaces/SignUp.html":{},"components/SignupComponent.html":{},"miscellaneous/variables.html":{}}}],["update",{"_index":40,"title":{},"body":{"components/AppComponent.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["updated",{"_index":767,"title":{},"body":{"components/NotificationComponent.html":{}}}],["updateloadersubject",{"_index":437,"title":{},"body":{"injectables/CommonService.html":{}}}],["updateloadersubject(loaderstate",{"_index":483,"title":{},"body":{"injectables/CommonService.html":{}}}],["updateloadersubject(true",{"_index":486,"title":{},"body":{"injectables/CommonService.html":{}}}],["updateloggedinusersubject",{"_index":438,"title":{},"body":{"injectables/CommonService.html":{}}}],["updateloggedinusersubject(`john",{"_index":489,"title":{},"body":{"injectables/CommonService.html":{}}}],["updateloggedinusersubject(john",{"_index":493,"title":{},"body":{"injectables/CommonService.html":{}}}],["updateloggedinusersubject(loggedinuser",{"_index":487,"title":{},"body":{"injectables/CommonService.html":{}}}],["updatenotificationsubject",{"_index":439,"title":{},"body":{"injectables/CommonService.html":{}}}],["updatenotificationsubject(`hello",{"_index":499,"title":{},"body":{"injectables/CommonService.html":{}}}],["updatenotificationsubject(hello",{"_index":500,"title":{},"body":{"injectables/CommonService.html":{}}}],["updatenotificationsubject(notification",{"_index":496,"title":{},"body":{"injectables/CommonService.html":{}}}],["updating",{"_index":288,"title":{},"body":{"injectables/AuthGuard.html":{},"components/GetDataComponent.html":{}}}],["url",{"_index":54,"title":{},"body":{"components/AppComponent.html":{},"injectables/BackendService.html":{}}}],["use",{"_index":737,"title":{},"body":{"components/NavbarComponent.html":{}}}],["useclass",{"_index":242,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":39,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthGuard.html":{},"interceptors/BackendInterceptor.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["user",{"_index":47,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthGuard.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/PostDataComponent.html":{},"interfaces/RequestData.html":{},"interfaces/SignIn.html":{},"interfaces/SignUp.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["user's",{"_index":492,"title":{},"body":{"injectables/CommonService.html":{},"components/NavbarComponent.html":{}}}],["username",{"_index":286,"title":{},"body":{"injectables/AuthGuard.html":{},"injectables/CommonService.html":{},"interfaces/DecodedJWT.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"interfaces/ResponseData.html":{},"interfaces/SignIn.html":{},"interfaces/SignUp.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["username(username",{"_index":566,"title":{},"body":{"injectables/CommonService.html":{}}}],["username]{@link",{"_index":571,"title":{},"body":{"injectables/CommonService.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{}}}],["users",{"_index":382,"title":{},"body":{"injectables/BackendService.html":{},"components/SigninComponent.html":{}}}],["uses",{"_index":360,"title":{},"body":{"injectables/BackendService.html":{}}}],["utc",{"_index":617,"title":{},"body":{"components/GetDataComponent.html":{}}}],["v0.0.1",{"_index":895,"title":{},"body":{"index.html":{}}}],["value",{"_index":62,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthGuard.html":{},"injectables/BackendService.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":388,"title":{},"body":{"injectables/BackendService.html":{}}}],["var",{"_index":174,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["variable",{"_index":629,"title":{},"body":{"components/GetDataComponent.html":{},"coverage.html":{}}}],["variables",{"_index":945,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["variation",{"_index":112,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{}}}],["version",{"_index":901,"title":{},"body":{"index.html":{},"properties.html":{}}}],["very",{"_index":906,"title":{},"body":{"index.html":{}}}],["void",{"_index":59,"title":{},"body":{"components/AppComponent.html":{},"injectables/CommonService.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{}}}],["wdth",{"_index":116,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{}}}],["web",{"_index":190,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{},"index.html":{}}}],["webkit",{"_index":97,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{}}}],["websocket",{"_index":374,"title":{},"body":{"injectables/BackendService.html":{},"components/WebSocketComponent.html":{},"miscellaneous/variables.html":{}}}],["websocketcomponent",{"_index":189,"title":{"components/WebSocketComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{},"components/NotificationComponent.html":{},"components/PostDataComponent.html":{},"components/SigninComponent.html":{},"components/SignupComponent.html":{},"components/WebSocketComponent.html":{},"coverage.html":{},"overview.html":{}}}],["websocketurl",{"_index":347,"title":{},"body":{"injectables/BackendService.html":{},"miscellaneous/variables.html":{}}}],["wght",{"_index":114,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{},"components/NavbarComponent.html":{}}}],["white",{"_index":710,"title":{},"body":{"components/GetDataComponent.html":{}}}],["whole",{"_index":344,"title":{},"body":{"injectables/BackendService.html":{}}}],["width",{"_index":144,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{}}}],["without",{"_index":324,"title":{},"body":{"interceptors/BackendInterceptor.html":{}}}],["world",{"_index":426,"title":{},"body":{"injectables/BackendService.html":{},"injectables/CommonService.html":{}}}],["world!&#39",{"_index":502,"title":{},"body":{"injectables/CommonService.html":{}}}],["ws://:3000",{"_index":965,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ws://localhost:8080",{"_index":963,"title":{},"body":{"miscellaneous/variables.html":{}}}],["x",{"_index":141,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{}}}],["xoxoxoxoxo",{"_index":709,"title":{},"body":{"components/GetDataComponent.html":{}}}],["z",{"_index":161,"title":{},"body":{"components/AppComponent.html":{},"components/GetDataComponent.html":{}}}],["zone.js",{"_index":892,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":212,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n    \n        Description\n    \n    \n        This is the root component of the application.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n\n\n            \n                styleUrls\n                ./app.component.css\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                loaderStatus\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(commonService: CommonService)\n                    \n                \n                        \n                            \n                                Defined in src/app/app.component.ts:13\n                            \n                        \n\n                \n                    \n                            This is the constructor of the root component.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        commonService\n                                                  \n                                                        \n                                                                        CommonService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                is used to update the loader status.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/app.component.ts:36\n                \n            \n\n\n            \n                \n                    This method is used to initialize the root component. It will check if the user is already logged in or not, to handle the page refresh and direct URL access. It will also subscribe to the loaderSubject to update the loaderStatus.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        loaderStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:25\n                        \n                    \n\n            \n                \n                    This is used to show the loader on the screen. It will be shown when the value is true.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : appConstant.appName\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:31\n                        \n                    \n\n            \n                \n                    This is the title of the application. It will be shown on the browser tab.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { CommonService } from './services/common.service';\nimport { appConstant } from 'src/constants/app.constant';\n\n/**\n * This is the root component of the application.\n */\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent implements OnInit {\n  /**\n   * This is the constructor of the root component.\n   * @param { CommonService } commonService is used to update the loader status.\n   */\n  constructor(private commonService: CommonService) {}\n\n  /**\n   * This is used to show the loader on the screen. It will be shown when the value is true.\n   * @default false\n   * @type { boolean }\n   */\n  loaderStatus: boolean = false;\n\n  /**\n   * This is the title of the application. It will be shown on the browser tab.\n   * @type { string }\n   */\n  title: string = appConstant.appName;\n\n  /**\n   * This method is used to initialize the root component. It will check if the user is already logged in or not, to handle the page refresh and direct URL access. It will also subscribe to the [loaderSubject]{@link CommonService#loaderSubject} to update the [loaderStatus]{@link loaderStatus}.\n   */\n  ngOnInit(): void {\n    this.commonService.checkSavedCredentials();\n    this.commonService.loaderSubject$.subscribe((loaderStatus: boolean) => {\n      this.loaderStatus = loaderStatus;\n    });\n  }\n}\n\n    \n\n    \n        \n  \n    \n      Base Frontend\n    \n    \n    \n    \n    \n    \n    Loading...\n    \n    \n  \n  \n\n\n    \n\n    \n                \n                    ./app.component.css\n                \n                .retro {\n  margin: 20px 20px;\n}\n\n@keyframes hue {\n  from {\n    -webkit-filter: hue-rotate(0deg);\n    text-shadow: -20px -20px hue-rotate(0deg);\n  }\n  to {\n    -webkit-filter: hue-rotate(-360deg);\n    text-shadow: -5px -5px hue-rotate(-360deg);\n  }\n}\n\n.typography {\n  text-align: center;\n  font-size: 100px !important;\n  font-variation-settings: \"wght\" 450, \"wdth\" 180 !important;\n  margin: 20px 0px;\n\n  background-image: -webkit-linear-gradient(90deg, #f35626, #feab3a);\n  text-shadow: -5px -5px #feab3a;\n\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  -webkit-animation: hue 2s infinite cubic-bezier(0.165, 0.84, 0.44, 1)\n    alternate-reverse !important;\n}\n\nspan {\n  text-emphasis: \"x\";\n  background-image: -webkit-linear-gradient(90deg, #f35626, #feab3a);\n  text-shadow: -5px -5px #feab3a;\n}\n\n@media (max-width: 768px) {\n  .typography {\n    font-size: 80px !important;\n  }\n}\n\n@media (max-width: 500px) {\n  .typography {\n    font-size: 50px !important;\n  }\n}\n\n.highlight {\n  position: relative;\n}\n.highlight:before {\n  content: \"\";\n  background-color: black;\n  width: 100%;\n  transform: rotate(-2.5deg);\n  height: 0.9em;\n  position: absolute;\n  z-index: -111;\n  left: -0.45em;\n  top: 0.1em;\n  padding: 0 0.2em;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Base Frontend                            Loading...            '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GetDataComponent', 'selector': 'app-get-data'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PostDataComponent', 'selector': 'app-post-data'},{'name': 'SigninComponent', 'selector': 'app-signin'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'WebSocketComponent', 'selector': 'app-web-socket'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_declarations\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nGetDataComponent\n\nGetDataComponent\n\nAppModule -->\n\nGetDataComponent->AppModule\n\n\n\n\n\nNavbarComponent\n\nNavbarComponent\n\nAppModule -->\n\nNavbarComponent->AppModule\n\n\n\n\n\nNotificationComponent\n\nNotificationComponent\n\nAppModule -->\n\nNotificationComponent->AppModule\n\n\n\n\n\nPostDataComponent\n\nPostDataComponent\n\nAppModule -->\n\nPostDataComponent->AppModule\n\n\n\n\n\nSigninComponent\n\nSigninComponent\n\nAppModule -->\n\nSigninComponent->AppModule\n\n\n\n\n\nSignupComponent\n\nSignupComponent\n\nAppModule -->\n\nSignupComponent->AppModule\n\n\n\n\n\nWebSocketComponent\n\nWebSocketComponent\n\nAppModule -->\n\nWebSocketComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nAuthGuard\n\nAuthGuard\n\nAppModule -->\n\nAuthGuard->AppModule\n\n\n\n\n\nBackendInterceptor\n\nBackendInterceptor\n\nAppModule -->\n\nBackendInterceptor->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AppComponent\n                        \n                        \n                            GetDataComponent\n                        \n                        \n                            NavbarComponent\n                        \n                        \n                            NotificationComponent\n                        \n                        \n                            PostDataComponent\n                        \n                        \n                            SigninComponent\n                        \n                        \n                            SignupComponent\n                        \n                        \n                            WebSocketComponent\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            AuthGuard\n                        \n                        \n                            BackendInterceptor\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRoutingModule\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { SigninComponent } from './components/signin/signin.component';\nimport { SignupComponent } from './components/signup/signup.component';\nimport { GetDataComponent } from './components/get-data/get-data.component';\nimport { PostDataComponent } from './components/post-data/post-data.component';\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { FormsModule } from '@angular/forms';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { NotificationComponent } from './components/notification/notification.component';\nimport { BackendInterceptor } from './services/backend.interceptor';\nimport { AuthGuard } from './services/auth.guard';\nimport { WebSocketComponent } from './components/web-socket/web-socket.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SigninComponent,\n    SignupComponent,\n    GetDataComponent,\n    PostDataComponent,\n    NavbarComponent,\n    NotificationComponent,\n    WebSocketComponent,\n  ],\n  imports: [BrowserModule, AppRoutingModule, FormsModule, HttpClientModule],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: BackendInterceptor,\n      multi: true,\n    },\n    AuthGuard,\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { SigninComponent } from './components/signin/signin.component';\nimport { SignupComponent } from './components/signup/signup.component';\nimport { PostDataComponent } from './components/post-data/post-data.component';\nimport { GetDataComponent } from './components/get-data/get-data.component';\nimport { AuthGuard } from './services/auth.guard';\n\n/**\n * This is the routes constant. It contains all the routes of the application.\n */\nconst routes: Routes = [\n  {\n    path: 'signin',\n    component: SigninComponent,\n  },\n  {\n    path: 'signup',\n    component: SignupComponent,\n  },\n  {\n    path: 'post-data',\n    component: PostDataComponent,\n    canActivate: [AuthGuard],\n  },\n  { path: 'get-data', component: GetDataComponent, canActivate: [AuthGuard] },\n  { path: '**', redirectTo: '' },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthGuard.html":{"url":"injectables/AuthGuard.html","title":"injectable - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                This is the auth guard service class. It is used to check if the user is logged in or not logged in.\nThis auth guard is used to protect the get data screen and post data screen.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commonService: CommonService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/auth.guard.ts:10\n                            \n                        \n\n                \n                    \n                            This is the constructor of the auth guard class.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        commonService\n                                                  \n                                                        \n                                                                        CommonService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                is used to get the loggedInUserSubject observable. It is used to check if the user is logged in or not logged in.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/auth.guard.ts:24\n                \n            \n\n\n            \n                \n                    This method is used to check if the user is logged in or not logged in. It will return true if the user is logged in, else, it will return false.\nThis auth guard is used to protect the get data and post data routes.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                            ActivatedRouteSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is the route to be activated i.e. the route user is trying to access.\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                            RouterStateSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is the state of the route to be activated\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        a boolean value. If the user is logged in, returning true, else, returning false.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { CommonService } from './common.service';\n\n/**\n * This is the auth guard service class. It is used to check if the user is logged in or not logged in.\n * This auth guard is used to protect the get data screen and post data screen.\n */\n@Injectable()\nexport class AuthGuard {\n  /**\n   * This is the constructor of the auth guard class.\n   * @param commonService is used to get the [loggedInUserSubject]{@link CommonService#loggedInUserSubject} observable. It is used to check if the user is logged in or not logged in.\n   */\n  constructor(private commonService: CommonService) {}\n\n  /**\n   * This method is used to check if the user is logged in or not logged in. It will return true if the user is logged in, else, it will return false.\n   * This auth guard is used to protect the get data and post data routes.\n   * @param route is the route to be activated i.e. the route user is trying to access.\n   * @param state is the state of the route to be activated\n   * @returns a boolean value. If the user is logged in, returning true, else, returning false.\n   */\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean {\n    /**\n     * By default, assuming that the user is not logged in.\n     */\n    let value: boolean = false;\n    /**\n     * Subscribing to the [loggedInUserSubject]{@link CommonService#loggedInUserSubject} observable.\n     * If the user is logged in it would mean that user has a username stored in loggedInUserSubject.\n     * If the user is logged in, updating the value to true. For any error, logging the error.\n     */\n    this.commonService.loggedInUserSubject.subscribe({\n      next: (loggedInUser: string) => {\n        if (loggedInUser.length > 0) {\n          value = true;\n        }\n      },\n      error: (error: any) => {\n        this.commonService.logger(error);\n      },\n    });\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interceptors/BackendInterceptor.html":{"url":"interceptors/BackendInterceptor.html","title":"interceptor - BackendInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Interceptors\n  BackendInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/backend.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                This is the backend interceptor. It is used to intercept the API calls to the backend. It will add the authorization token to the headers of the API call.\n\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commonService: CommonService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/backend.interceptor.ts:15\n                            \n                        \n\n                \n                    \n                            This is the constructor of the backend interceptor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        commonService\n                                                  \n                                                        \n                                                                        CommonService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                is used to get the token from the session storage.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(request: HttpRequest<>, next: HttpHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/backend.interceptor.ts:27\n                \n            \n\n\n            \n                \n                    This method is used to intercept the API calls to the backend. It will add the authorization token to the headers of the API call.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            HttpRequest<>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is the request to be sent to the backend.\n\n                                    \n                                \n                                \n                                    next\n                                    \n                                            HttpHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is the next handler in the chain.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { CommonService } from './common.service';\n\n/**\n * This is the backend interceptor. It is used to intercept the API calls to the backend. It will add the authorization token to the headers of the API call.\n */\n@Injectable()\nexport class BackendInterceptor implements HttpInterceptor {\n  /**\n   * This is the constructor of the backend interceptor.\n   * @param commonService is used to get the token from the session storage.\n   */\n  constructor(private commonService: CommonService) {}\n\n  /**\n   * This method is used to intercept the API calls to the backend. It will add the authorization token to the headers of the API call.\n   * @param request is the request to be sent to the backend.\n   * @param next is the next handler in the chain.\n   */\n  intercept(\n    request: HttpRequest,\n    next: HttpHandler\n  ): Observable> {\n    /**  return next.handle(request); */ // This will send the request to the backend without any modification.\n\n    /**\n     * If the request is for sign in or sign up API, then there is no need to add the authorization token to the headers.\n     */\n    if (request.url.includes('signin') || request.url.includes('signup')) {\n      return next.handle(request);\n    }\n    const token: string = this.commonService.token;\n\n    /**\n     * Attaching the authorization token to the headers of the every other backend requests.\n     */\n    return next.handle(\n      request.clone({\n        setHeaders: { Authorization: `Bearer ${token.split(' ')[1]}` },\n      })\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BackendService.html":{"url":"injectables/BackendService.html","title":"injectable - BackendService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BackendService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/backend.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This is the service class for the backend. It is used to make the API calls to the backend. It is injected in the app.module.ts file as it is used in the whole application for making the API calls.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                backendUrl\n                            \n                            \n                                websocketUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleGetData\n                            \n                            \n                                handleGetWebSocketData\n                            \n                            \n                                handlePostData\n                            \n                            \n                                handleSignIn\n                            \n                            \n                                handleSignOut\n                            \n                            \n                                handleSignUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpClient: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/backend.service.ts:16\n                            \n                        \n\n                \n                    \n                            This is the constructor of the service class.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        httpClient\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                is used to make the API calls.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleGetData\n                        \n                    \n                \n            \n            \n                \nhandleGetData(currentOffset: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/backend.service.ts:80\n                \n            \n\n\n            \n                \n                    This method is used to get all the data from the backend. This uses pagination.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    currentOffset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is the current offset. It is used to get the data from the backend. It will be the marker for the subsequent API call. This is passed as a query parameter to the backend.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        the response from the backend in the form of an observable.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleGetWebSocketData\n                        \n                    \n                \n            \n            \n                \nhandleGetWebSocketData()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/backend.service.ts:97\n                \n            \n\n\n            \n                \n                    This method is used to get message from websocket.\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handlePostData\n                        \n                    \n                \n            \n            \n                \nhandlePostData(data: RequestData)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/backend.service.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                RequestData\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is the data to be sent to the backend.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        the response from the backend in the form of an observable.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleSignIn\n                        \n                    \n                \n            \n            \n                \nhandleSignIn(data: SignIn)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/backend.service.ts:40\n                \n            \n\n\n            \n                \n                    This method is used to handle the sign in API call to the backend. It uses POST method to send the data to the backend. It signs in existing users.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                SignIn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is the data to be sent to the backend.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        the response from the backend in the form of an observable. Normally, the response body is returned by the API call. But, in this case, response header values are required for getting authorization token set by backend. Therefore, setting the observe: 'response' option.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleSignOut\n                        \n                    \n                \n            \n            \n                \nhandleSignOut()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/backend.service.ts:69\n                \n            \n\n\n            \n                \n                    This method is used to handle the sign out API call to the backend. It uses get method to send the data to the backend. It signs out the logged in user.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        the response from the backend in the form of an observable. Normally, the response body is returned by the API call. But, in this case, response header values are required for getting authorization token set by backend. Therefore, setting the observe: 'response' option.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleSignUp\n                        \n                    \n                \n            \n            \n                \nhandleSignUp(data: SignUp)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/backend.service.ts:55\n                \n            \n\n\n            \n                \n                    This method is used to handle the sign up API call to the backend. It uses post method to send the data to the backend. It creates a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                SignUp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        the response from the backend in the form of an observable. Normally, the response body is returned by the API call. But, in this case, response header values are required for getting authorization token set by backend. Therefore, setting the observe: 'response' option.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        backendUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : environment.backendUrl\n                    \n                \n                    \n                        \n                                Defined in src/app/services/backend.service.ts:27\n                        \n                    \n\n            \n                \n                    This is the URL for the backend. This will be picked from the current environment.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        websocketUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : environment.backendUrl\n                    \n                \n                    \n                        \n                                Defined in src/app/services/backend.service.ts:33\n                        \n                    \n\n            \n                \n                    This is the URL for the websocket. This will be picked from the current environment.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { SignIn } from '../models/SignIn.model';\nimport { SignUp } from '../models/SignUp.model';\nimport { RequestData } from '../models/RequestData.model';\n\nimport { apiPathConstant } from 'src/constants/apiPath.constant';\n\n/**\n * This is the service class for the backend. It is used to make the API calls to the backend. It is injected in the [app.module.ts]{@link AppModule} file as it is used in the whole application for making the API calls.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class BackendService {\n  /**\n   * This is the constructor of the service class.\n   * @param {HttpClient} httpClient is used to make the API calls.\n   */\n  constructor(private httpClient: HttpClient) {}\n\n  /**\n   * This is the URL for the backend. This will be picked from the current environment.\n   * @type {string}\n   */\n  backendUrl: string = environment.backendUrl;\n\n  /**\n   * This is the URL for the websocket. This will be picked from the current environment.\n   * @type {string}\n   */\n  websocketUrl: string = environment.backendUrl;\n\n  /**\n   * This method is used to handle the sign in API call to the backend. It uses POST method to send the data to the backend. It signs in existing users.\n   * @param {SignIn} data is the data to be sent to the backend.\n   * @returns the response from the backend in the form of an observable. Normally, the response body is returned by the API call. But, in this case, response header values are required for getting authorization token set by backend. Therefore, setting the observe: 'response' option.\n   */\n  handleSignIn(data: SignIn) {\n    return this.httpClient.post(\n      this.backendUrl + apiPathConstant.signIn,\n      data,\n      {\n        observe: 'response',\n      }\n    );\n  }\n\n  /**\n   * This method is used to handle the sign up API call to the backend. It uses post method to send the data to the backend. It creates a new user.\n   * @param {SignUp} data\n   * @returns the response from the backend in the form of an observable. Normally, the response body is returned by the API call. But, in this case, response header values are required for getting authorization token set by backend. Therefore, setting the observe: 'response' option.\n   */\n  handleSignUp(data: SignUp) {\n    return this.httpClient.post(\n      this.backendUrl + apiPathConstant.signUp,\n      data,\n      {\n        observe: 'response',\n      }\n    );\n  }\n\n  /**\n   * This method is used to handle the sign out API call to the backend. It uses get method to send the data to the backend. It signs out the logged in user.\n   * @returns the response from the backend in the form of an observable. Normally, the response body is returned by the API call. But, in this case, response header values are required for getting authorization token set by backend. Therefore, setting the observe: 'response' option.\n   */\n  handleSignOut() {\n    return this.httpClient.get(this.backendUrl + apiPathConstant.signOut, {\n      observe: 'response',\n    });\n  }\n\n  /**\n   * This method is used to get all the data from the backend. This uses pagination.\n   * @param {number} currentOffset is the current offset. It is used to get the data from the backend. It will be the marker for the subsequent API call. This is passed as a query parameter to the backend.\n   * @returns the response from the backend in the form of an observable.\n   */\n  handleGetData(currentOffset: number) {\n    return this.httpClient.get(\n      this.backendUrl + apiPathConstant.data + `?offset=${currentOffset}`\n    );\n  }\n\n  /**\n   * @param {RequestData} data is the data to be sent to the backend.\n   * @returns the response from the backend in the form of an observable.\n   */\n  handlePostData(data: RequestData) {\n    return this.httpClient.post(this.backendUrl + apiPathConstant.data, data);\n  }\n\n  /**\n   * This method is used to get message from websocket.\n   */\n  handleGetWebSocketData() {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommonService.html":{"url":"injectables/CommonService.html","title":"injectable - CommonService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommonService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/common.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This is the common service. It has the methods and shared observables that are used throughout the application. Therefore, it is injected in the app.module.ts file.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                loaderSubject\n                            \n                            \n                                loaderSubject$\n                            \n                            \n                                loggedInUserSubject\n                            \n                            \n                                loggedInUserSubject$\n                            \n                            \n                                notificationSubject\n                            \n                            \n                                notificationSubject$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkSavedCredentials\n                            \n                            \n                                decodeToken\n                            \n                            \n                                logger\n                            \n                            \n                                signOut\n                            \n                            \n                                updateLoaderSubject\n                            \n                            \n                                updateLoggedInUserSubject\n                            \n                            \n                                updateNotificationSubject\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    token\n                                \n                                \n                                    username\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, backendService: BackendService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/common.service.ts:15\n                            \n                        \n\n                \n                    \n                            This is the constructor of the CommonService class.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                is used to navigate the user to different pages.\n\n                                                        \n                                                \n                                                \n                                                        backendService\n                                                  \n                                                        \n                                                                        BackendService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                is used to call the backend APIs.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkSavedCredentials\n                        \n                    \n                \n            \n            \n                \ncheckSavedCredentials()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/common.service.ts:192\n                \n            \n\n\n            \n                \n                    This method is used to check if the user has already signed in. It will check if the token and username are present in the session storage. If they are present, it will set the token and username.\nFor additional security, it will also check if the username in the token matches the username in the session storage. If they do not match, it will call the signOut method.\nIt will try to decode the token. If an error occurs while decoding the token, it will call the signOut method.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        decodeToken\n                        \n                    \n                \n            \n            \n                \ndecodeToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/common.service.ts:137\n                \n            \n\n\n            \n                \n                    This method is used to decode the JWT. It will return the decoded JWT. If the token is empty, it will return default response. If while decoding the JWT, an error occurs, it will call the signOut method and return default response.\ndecodeToken(jwt);\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is the JWT to be decoded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            decodeToken(jwt);\n                        \n                    \n                    \n                        Returns :         DecodedJWT\n\n                    \n                    \n                        the decoded JWT.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n            \n                \nlogger(message: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/common.service.ts:241\n                \n            \n\n\n            \n                \n                    This method is used to log messages to the console. It will not log anything in production mode. It will also not log anything if the message is empty.\nlogger(`Something happened.`); // This will log 'Something happened.' to the console.\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is the message to be logged.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            logger(Something happened.); // This will log &#39;Something happened.&#39; to the console.\n                        \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signOut\n                        \n                    \n                \n            \n            \n                \nsignOut()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/common.service.ts:114\n                \n            \n\n\n            \n                \n                    This method is used to sign out the signed in user. It will call the handleSignOut method. It will also clear the token and username from the session storage. After that, it will navigate the user to the sign in page.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateLoaderSubject\n                        \n                    \n                \n            \n            \n                \nupdateLoaderSubject(loaderState: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/common.service.ts:39\n                \n            \n\n\n            \n                \n                    This method is used to update the loaderSubject. It will update the loaderSubject with the value of the loaderState parameter.\nupdateLoaderSubject(true); // This will update the loaderSubject with true.\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loaderState\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is the state of the loader.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            updateLoaderSubject(true); // This will update the loaderSubject with true.\n                        \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateLoggedInUserSubject\n                        \n                    \n                \n            \n            \n                \nupdateLoggedInUserSubject(loggedInUser: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/common.service.ts:91\n                \n            \n\n\n            \n                \n                    This method is used to update the loggedInUserSubject. It will update the loggedInUserSubject with the value of the loggedInUser parameter.\nupdateLoggedInUserSubject(`John Doe`); // This will update the loggedInUserSubject with 'John Doe'.\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loggedInUser\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is the logged in user's name which is to be shown on the screen.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            updateLoggedInUserSubject(John Doe); // This will update the loggedInUserSubject with &#39;John Doe&#39;.\n                        \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateNotificationSubject\n                        \n                    \n                \n            \n            \n                \nupdateNotificationSubject(notification: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/common.service.ts:65\n                \n            \n\n\n            \n                \n                    This method is used to update the notificationSubject. It will update the notificationSubject with the value of the notification parameter.\nupdateNotificationSubject(`Hello world!`); // This will update the notificationSubject with 'Hello world!'.\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    notification\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is the notification to be shown on the screen.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            updateNotificationSubject(Hello world!); // This will update the notificationSubject with &#39;Hello world!&#39;.\n                        \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        loaderSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/common.service.ts:27\n                        \n                    \n\n            \n                \n                    This is the loader subject. It is used to show the loader on the screen. It is initialized with false.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loaderSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.loaderSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/common.service.ts:31\n                        \n                    \n\n            \n                \n                    This is the loader subject observable. This is used to subscribe to the loaderSubject.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loggedInUserSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(\n    ''\n  )\n                    \n                \n                    \n                        \n                                Defined in src/app/services/common.service.ts:77\n                        \n                    \n\n            \n                \n                    This is the logged in user subject. It is used to show the logged in user's name on the screen. It is initialized with an empty string.\nloggedInUserSubject.subscribe((loggedInUser: string) => {\n// Do something with the logged in user name.\n});\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loggedInUserSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.loggedInUserSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/common.service.ts:83\n                        \n                    \n\n            \n                \n                    This is the logged in user subject observable. This is used to subscribe to the loggedInUserSubject.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notificationSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(\n    ''\n  )\n                    \n                \n                    \n                        \n                                Defined in src/app/services/common.service.ts:51\n                        \n                    \n\n            \n                \n                    This is the notification subject. It is used to show the notification on the screen. It is initialized with an empty string.\nnotificationSubject.subscribe((notification: string) => {\n // Do something with the notification.\n});\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notificationSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.notificationSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/common.service.ts:57\n                        \n                    \n\n            \n                \n                    This is the notification subject observable. This is used to subscribe to the notificationSubject.\n\n                \n            \n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        token\n                    \n                \n\n                \n                    \n                        gettoken()\n                    \n                \n                            \n                                \n                                    Defined in src/app/services/common.service.ts:107\n                                \n                            \n                    \n                        \n                                This is used to get the token from the session storage. If the token is not present in the session storage, it will return an empty string.\n\n\n                                \n                                \n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n                \n                    \n                        settoken(token: string)\n                    \n                \n                            \n                                \n                                    Defined in src/app/services/common.service.ts:99\n                                \n                            \n                    \n                        \n                                This is used to set the token in the session storage.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            token\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    is the token to be set.\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        username\n                    \n                \n\n                \n                    \n                        getusername()\n                    \n                \n                            \n                                \n                                    Defined in src/app/services/common.service.ts:183\n                                \n                            \n                    \n                        \n                                This is used to get the username from the session storage. If the username is not present in the session storage, it will return an empty string.\n\n\n                                \n                                \n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n                \n                    \n                        setusername(username: string)\n                    \n                \n                            \n                                \n                                    Defined in src/app/services/common.service.ts:174\n                                \n                            \n                    \n                        \n                                This is used to set the username in the session storage. It will also update the loggedInUserSubject.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            username\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    is the username to be set.\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, finalize } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { BackendService } from './backend.service';\nimport { environment } from 'src/environments/environment';\nimport { appConstant } from 'src/constants/app.constant';\nimport { DecodedJWT } from '../models/DecodedJWT.model';\n\n/**\n * This is the common service. It has the methods and shared observables that are used throughout the application. Therefore, it is injected in the [app.module.ts]{@link AppModule} file.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CommonService {\n  /**\n   * This is the constructor of the [CommonService]{@link CommonService} class.\n   * @param {Router} router is used to navigate the user to different pages.\n   * @param {BackendService} backendService is used to call the backend APIs.\n   */\n  constructor(private router: Router, private backendService: BackendService) {}\n\n  /**\n   * This is the loader subject. It is used to show the loader on the screen. It is initialized with `false`.\n   * @type {BehaviorSubject}\n   */\n  loaderSubject: BehaviorSubject = new BehaviorSubject(false);\n  /**\n   * This is the loader subject observable. This is used to subscribe to the [loaderSubject]{@link loaderSubject}.\n   */\n  loaderSubject$ = this.loaderSubject.asObservable();\n\n  /**\n   * This method is used to update the [loaderSubject]{@link loaderSubject}. It will update the [loaderSubject]{@link loaderSubject} with the value of the `loaderState` parameter.\n   * @param {boolean} loaderState is the state of the loader.\n   * @example\n   * updateLoaderSubject(true); // This will update the loaderSubject with true.\n   */\n  updateLoaderSubject(loaderState: boolean) {\n    this.loaderSubject.next(loaderState);\n  }\n\n  /**\n   * This is the notification subject. It is used to show the notification on the screen. It is initialized with an empty string.\n   * @type {BehaviorSubject}\n   * @example\n   * notificationSubject.subscribe((notification: string) => {\n   *  // Do something with the notification.\n   * });\n   */\n  notificationSubject: BehaviorSubject = new BehaviorSubject(\n    ''\n  );\n  /**\n   * This is the notification subject observable. This is used to subscribe to the [notificationSubject]{@link notificationSubject}.\n   */\n  notificationSubject$ = this.notificationSubject.asObservable();\n\n  /**\n   * This method is used to update the [notificationSubject]{@link notificationSubject}. It will update the [notificationSubject]{@link notificationSubject} with the value of the `notification` parameter.\n   * @param {string} notification is the notification to be shown on the screen.\n   * @example\n   * updateNotificationSubject(`Hello world!`); // This will update the notificationSubject with 'Hello world!'.\n   */\n  updateNotificationSubject(notification: string) {\n    this.notificationSubject.next(notification);\n  }\n\n  /**\n   * This is the logged in user subject. It is used to show the logged in user's name on the screen. It is initialized with an empty string.\n   * @type {BehaviorSubject}\n   * @example\n   * loggedInUserSubject.subscribe((loggedInUser: string) => {\n   * // Do something with the logged in user name.\n   * });\n   */\n  loggedInUserSubject: BehaviorSubject = new BehaviorSubject(\n    ''\n  );\n  /**\n   * This is the logged in user subject observable. This is used to subscribe to the [loggedInUserSubject]{@link loggedInUserSubject}.\n   */\n  loggedInUserSubject$ = this.loggedInUserSubject.asObservable();\n\n  /**\n   * This method is used to update the [loggedInUserSubject]{@link loggedInUserSubject}. It will update the [loggedInUserSubject]{@link loggedInUserSubject} with the value of the `loggedInUser` parameter.\n   * @param {string} loggedInUser is the logged in user's name which is to be shown on the screen.\n   * @example\n   * updateLoggedInUserSubject(`John Doe`); // This will update the loggedInUserSubject with 'John Doe'.\n   */\n  updateLoggedInUserSubject(loggedInUser: string) {\n    this.loggedInUserSubject.next(loggedInUser);\n  }\n\n  /**\n   * This is used to set the token in the session storage.\n   * @param {string} token is the token to be set.\n   */\n  set token(token: string) {\n    sessionStorage.setItem(appConstant.authorizationHeaderKey, token);\n  }\n\n  /**\n   * This is used to get the token from the session storage. If the token is not present in the session storage, it will return an empty string.\n   * @type {string}\n   */\n  get token(): string {\n    return sessionStorage.getItem(appConstant.authorizationHeaderKey) ?? '';\n  }\n\n  /**\n   * This method is used to sign out the signed in user. It will call the [handleSignOut]{@link BackendService#handleSignOut} method. It will also clear the token and username from the session storage. After that, it will navigate the user to the sign in page.\n   */\n  signOut() {\n    /**\n     * Resetting the token and username.\n     */\n    this.updateLoaderSubject(true);\n    this.updateNotificationSubject(\n      `${appConstant.success} ${appConstant.signOut}.`\n    );\n    this.token = '';\n    this.username = '';\n    sessionStorage.removeItem(appConstant.authorizationHeaderKey);\n    sessionStorage.removeItem('username');\n    this.router.navigate(['/signin']);\n    this.updateLoaderSubject(false);\n  }\n\n  /**\n   * This method is used to decode the JWT. It will return the decoded JWT. If the token is empty, it will return default response. If while decoding the JWT, an error occurs, it will call the [signOut]{@link signOut} method and return default response.\n   * @param token is the JWT to be decoded.\n   * @example\n   * decodeToken(jwt);\n   * @returns { DecodedJWT } the decoded JWT.\n   */\n  decodeToken(token: string): DecodedJWT {\n    /**\n     * This is the default response. It will be returned if the token is empty or if an error occurs while decoding the JWT.\n     * @type { DecodedJWT }\n     */\n    let response: DecodedJWT = {\n      exp: 0,\n      iat: 0,\n      username: '',\n    };\n\n    /**\n     * If the token is empty, returning the default response.\n     */\n    if (!token) {\n      return response;\n    }\n    /**\n     * Trying to decode the JWT. If an error occurs, calling the [signOut]{@link signOut} method and returning the default response.\n     */\n    try {\n      const jwtPayload: string = token.split('.')[1];\n      const base64: string = jwtPayload.replace(/-/g, '+').replace(/_/g, '/');\n      const decodedPayload: any = JSON.parse(atob(base64));\n      response = decodedPayload;\n      return response;\n    } catch (error) {\n      this.signOut();\n      this.logger(error);\n      return response;\n    }\n  }\n\n  /**\n   * This is used to set the username in the session storage. It will also update the [loggedInUserSubject]{@link loggedInUserSubject}.\n   * @param {string} username is the username to be set.\n   */\n  set username(username: string) {\n    this.updateLoggedInUserSubject(username);\n    sessionStorage.setItem('username', username);\n  }\n\n  /**\n   * This is used to get the username from the session storage. If the username is not present in the session storage, it will return an empty string.\n   * @type {string}\n   */\n  get username(): string {\n    return sessionStorage.getItem('username') ?? '';\n  }\n\n  /**\n   * This method is used to check if the user has already signed in. It will check if the token and username are present in the session storage. If they are present, it will set the [token]{@link token} and [username]{@link username}.\n   * For additional security, it will also check if the username in the token matches the username in the session storage. If they do not match, it will call the [signOut]{@link signOut} method.\n   * It will try to decode the token. If an error occurs while decoding the token, it will call the [signOut]{@link signOut} method.\n   */\n  checkSavedCredentials() {\n    try {\n      const sessionStorageToken = sessionStorage.getItem(\n        appConstant.authorizationHeaderKey\n      );\n      const sessionStorageUsername = sessionStorage.getItem('username');\n\n      /**\n       * If the token is empty or the username is empty, then returning from the method.\n       */\n      if (!sessionStorageToken || !sessionStorageUsername) {\n        return;\n      }\n\n      const decodedToken: DecodedJWT = this.decodeToken(\n        sessionStorageToken ?? ''\n      );\n      /**\n       * If the decoded token has username as empty, calling the [signOut]{@link signOut} method.\n       * If the username in the token does not match the username in the session storage, calling the [signOut]{@link signOut} method.\n       */\n      if (\n        !decodedToken.username ||\n        (decodedToken.username &&\n          decodedToken.username !== sessionStorageUsername)\n      ) {\n        this.signOut();\n        return;\n      }\n\n      /**\n       * If the token and username are present in the session storage, setting the [token]{@link token} and [username]{@link username}. This would handle the case when the user has already signed in and has not signed out i.e the user has closed the browser tab and opened the application again or the user has refreshed the page.\n       */\n      if (sessionStorageToken && sessionStorageUsername) {\n        this.token = sessionStorageToken;\n        this.username = sessionStorageUsername;\n      }\n    } catch (error) {\n      this.signOut();\n      this.logger(error);\n    }\n  }\n\n  /**\n   * This method is used to log messages to the console. It will not log anything in production mode. It will also not log anything if the message is empty.\n   * @param {any} message is the message to be logged.\n   * @example\n   * logger(`Something happened.`); // This will log 'Something happened.' to the console.\n   */\n  logger(message: any) {\n    if (environment.production || !message) {\n      return;\n    }\n    console.log(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DecodedJWT.html":{"url":"interfaces/DecodedJWT.html","title":"interface - DecodedJWT","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DecodedJWT\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/DecodedJWT.model.ts\n        \n\n\n            \n                Description\n            \n            \n                This is the interface for the decoded JWT.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            exp\n                                        \n                                \n                                \n                                        \n                                            iat\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        exp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        exp:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    This is the expiration time of the JWT.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        iat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        iat:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    This is the issue time of the JWT.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    This is the username extracted from the JWT.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface DecodedJWT {\n  /**\n   * This is the expiration time of the JWT.\n   */\n  exp: number;\n  /**\n   * This is the issue time of the JWT.\n   */\n  iat: number;\n  /**\n   * This is the username extracted from the JWT.\n   */\n  username: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GetDataComponent.html":{"url":"components/GetDataComponent.html","title":"component - GetDataComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  GetDataComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/get-data/get-data.component.ts\n\n\n\n    \n        Description\n    \n    \n        This component is used to show all the data from the backend.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-get-data\n            \n\n\n\n            \n                styleUrls\n                ./get-data.component.css\n            \n\n\n\n            \n                templateUrl\n                ./get-data.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                buttonText\n                            \n                            \n                                currentOffset\n                            \n                            \n                                data\n                            \n                            \n                                    Private\n                                subscription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                formatDate\n                            \n                            \n                                handleGetData\n                            \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(backendService: BackendService, commonService: CommonService)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/get-data/get-data.component.ts:16\n                            \n                        \n\n                \n                    \n                            This is the constructor of this component.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        backendService\n                                                  \n                                                        \n                                                                        BackendService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                is used to make the API call to the backend.\n\n                                                        \n                                                \n                                                \n                                                        commonService\n                                                  \n                                                        \n                                                                        CommonService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                is used to show the notification and loader on the screen.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        formatDate\n                        \n                    \n                \n            \n            \n                \nformatDate(date: Date)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/get-data/get-data.component.ts:122\n                \n            \n\n\n            \n                \n                    This method is used to format the date in the format DD/MM/YYYY, HH:MM:SS AM/PM. It will return an empty string if the date is not present or if the date is invalid.\nformatDate('2023-08-01T21:08:40.472Z'); // This will return '8/2/2023, 2:38:40 AM'.\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    date\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is the date to be formatted in UTC format.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            formatDate(&#39;2023-08-01T21:08:40.472Z&#39;); // This will return &#39;8/2/2023, 2:38:40 AM&#39;.\n                        \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        the date in the format DD/MM/YYYY, HH:MM:SS AM/PM.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleGetData\n                        \n                    \n                \n            \n            \n                \nhandleGetData()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/get-data/get-data.component.ts:63\n                \n            \n\n\n            \n                \n                    This method is used to get all the data from the backend. It will call the handleGetData method.\nIt will show the loader on the screen while the API call is in progress. After the API call is completed, it will hide the loader. It will show the notification on the screen based on the response from the backend.\nIt subscribes to the handleGetData to get the data from the backend. It will update the data with the data received from the backend. For error, it will reset data variable, show the error message on the screen and log the error in the console.\nIf the user is not logged in or the token is expired, then it will sign out the user.\nThe \"Get data\" button will become \"Get more data\" button after the first API call.\nIf the user clicks on the \"Get more data\" button again, it will call the handleGetData method again.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/get-data/get-data.component.ts:139\n                \n            \n\n\n            \n                \n                    This is called when the component is destroyed. It will unsubscribe from the subscription if it is present.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        buttonText\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Get data'\n                    \n                \n                    \n                        \n                                Defined in src/app/components/get-data/get-data.component.ts:32\n                        \n                    \n\n            \n                \n                    This is the text to be shown on the button. It is initialized with 'Get data'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentOffset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/components/get-data/get-data.component.ts:38\n                        \n                    \n\n            \n                \n                    This is the current offset. It is initialized with 0. It will be the marker for the subsequent API call.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResponseData[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/components/get-data/get-data.component.ts:45\n                        \n                    \n\n            \n                \n                    This is the data to be shown on the screen. It is initialized with an empty array.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/get-data/get-data.component.ts:52\n                        \n                    \n\n            \n                \n                    This is the subscription that would be used in this component. It is initialized with an empty subscription.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnDestroy } from '@angular/core';\nimport { finalize, Subscription } from 'rxjs';\nimport { ResponseData } from 'src/app/models/ResponseData.model';\nimport { BackendService } from 'src/app/services/backend.service';\nimport { CommonService } from 'src/app/services/common.service';\nimport { appConstant } from 'src/constants/app.constant';\n\n/**\n * This component is used to show all the data from the backend.\n */\n@Component({\n  selector: 'app-get-data',\n  templateUrl: './get-data.component.html',\n  styleUrls: ['./get-data.component.css'],\n})\nexport class GetDataComponent implements OnDestroy {\n  /**\n   * This is the constructor of this component.\n   * @param backendService is used to make the API call to the backend.\n   * @param commonService is used to show the notification and loader on the screen.\n   */\n  constructor(\n    private backendService: BackendService,\n    private commonService: CommonService\n  ) {}\n\n  /**\n   * This is the text to be shown on the button. It is initialized with 'Get data'.\n   * @type {string}\n   * @default 'Get data'\n   */\n  buttonText: string = 'Get data';\n\n  /**\n   * This is the current offset. It is initialized with 0. It will be the marker for the subsequent API call.\n   * @type {number}\n   */\n  currentOffset: number = 0;\n\n  /**\n   * This is the data to be shown on the screen. It is initialized with an empty array.\n   * @type {[]ResponseData}\n   * @default []\n   */\n  data: ResponseData[] = [];\n\n  /**\n   * This is the subscription that would be used in this component. It is initialized with an empty subscription.\n   * @type {Subscription}\n   * @private\n   */\n  private subscription!: Subscription;\n\n  /**\n   * This method is used to get all the data from the backend. It will call the [handleGetData]{@link BackendService#handleGetData} method.\n   * It will show the loader on the screen while the API call is in progress. After the API call is completed, it will hide the loader. It will show the notification on the screen based on the response from the backend.\n   * It subscribes to the [handleGetData]{@link BackendService#handleGetData} to get the data from the backend. It will update the [data]{@link data} with the data received from the backend. For error, it will reset data variable, show the error message on the screen and log the error in the console.\n   * If the user is not logged in or the token is expired, then it will sign out the user.\n   *\n   * The \"Get data\" button will become \"Get more data\" button after the first API call.\n   * If the user clicks on the \"Get more data\" button again, it will call the [handleGetData]{@link BackendService#handleGetData} method again.\n   */\n  handleGetData(): void {\n    this.commonService.updateLoaderSubject(true);\n    this.subscription = this.backendService\n      .handleGetData(this.currentOffset)\n      .pipe(\n        finalize(() => {\n          this.commonService.updateLoaderSubject(false);\n        })\n      )\n      .subscribe({\n        next: (response: any) => {\n          this.commonService.logger(response.data.docs);\n          this.data = response.data.docs;\n          this.commonService.updateNotificationSubject(\n            response?.message ||\n              `${appConstant.success} ${appConstant.getData}.`\n          );\n\n          /**\n           * Updating button text and increasing the current offset with the limit per page until the current offset is greater than or equal to the total number of documents.\n           */\n          this.buttonText = 'Get more data';\n\n          const limitPerPage = response.data?.limit ?? 0;\n          this.currentOffset = this.currentOffset + limitPerPage;\n          if (this.currentOffset >= response.data.totalDocs) {\n            this.currentOffset = 0;\n          }\n        },\n        error: (error: any) => {\n          this.data = [];\n          this.commonService.logger(error);\n\n          /**\n           * If the user is not logged in or the token is expired, then it will sign out the user, and user is notified with the error message.\n           */\n          if (error?.status === 401) {\n            this.commonService.updateNotificationSubject(\n              `${appConstant.error} ${appConstant.signInAgain}.`\n            );\n            this.commonService.signOut();\n            return;\n          }\n\n          this.commonService.updateNotificationSubject(\n            error.error?.message ||\n              `${appConstant.error} ${appConstant.getData}.`\n          );\n        },\n      });\n  }\n\n  /**\n   * This method is used to format the date in the format DD/MM/YYYY, HH:MM:SS AM/PM. It will return an empty string if the date is not present or if the date is invalid.\n   * @param {Date} date is the date to be formatted in UTC format.\n   * @example\n   * formatDate('2023-08-01T21:08:40.472Z'); // This will return '8/2/2023, 2:38:40 AM'.\n   * @returns the date in the format DD/MM/YYYY, HH:MM:SS AM/PM.\n   */\n  formatDate(date: Date): string {\n    try {\n      if (!date) {\n        return '';\n      }\n      return new Date(date)\n        .toLocaleString('en-IN')\n        .replace('am', 'AM')\n        .replace('pm', 'PM');\n    } catch {\n      return '';\n    }\n  }\n\n  /**\n   * This is called when the component is destroyed. It will unsubscribe from the subscription if it is present.\n   */\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n\n    \n\n    \n        \n  {{ buttonText }}\n  \n    \n      username {{ item.username }}\n      date {{ formatDate(item.createdAt) }}\n      title {{ item.title }}\n      article {{ item.article }}\n    \n    \n  \n\n\n    \n\n    \n                \n                    ./get-data.component.css\n                \n                .box {\n  border: 1px solid #000;\n  padding: 20px;\n}\n\n.data {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\nspan {\n  font-variation-settings: \"wght\" 350, \"wdth\" 120;\n}\n\n.highlight {\n  position: relative;\n}\n.highlight:after {\n  position: absolute;\n  content: \"xoxoxoxoxo\";\n  color: white;\n  text-align: center;\n  background-image: -webkit-linear-gradient(90deg, #3d3d3d, #9f9f9f);\n  width: min-content;\n  transform: rotate(8.5deg);\n  height: 1.9em;\n  z-index: -111;\n  top: 0.04em;\n  right: 0.45em;\n  padding: 0 0.2em;\n  text-emphasis: \"x\";\n  filter: blur(0.5px);\n}\n\n.highlight:nth-child(2n + 1):after {\n  transform: rotate(1.8deg);\n  left: -7.15em;\n  left: auto;\n}\n\n.highlight:nth-child(2n):after {\n  transform: rotate(-8.5deg);\n  left: -1.45em;\n  right: auto;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  {{ buttonText }}            username {{ item.username }}      date {{ formatDate(item.createdAt) }}      title {{ item.title }}      article {{ item.article }}          '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GetDataComponent', 'selector': 'app-get-data'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PostDataComponent', 'selector': 'app-post-data'},{'name': 'SigninComponent', 'selector': 'app-signin'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'WebSocketComponent', 'selector': 'app-web-socket'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'GetDataComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NavbarComponent.html":{"url":"components/NavbarComponent.html","title":"component - NavbarComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NavbarComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/navbar/navbar.component.ts\n\n\n\n    \n        Description\n    \n    \n        This component is used to show the navigation bar on the screen.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-navbar\n            \n\n\n\n            \n                styleUrls\n                ./navbar.component.css\n            \n\n\n\n            \n                templateUrl\n                ./navbar.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                loggedInUser\n                            \n                            \n                                    Private\n                                subscription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkIsLoggedIn\n                            \n                            \n                                handleSignOut\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(commonService: CommonService)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/navbar/navbar.component.ts:13\n                            \n                        \n\n                \n                    \n                            This is the constructor of this component.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        commonService\n                                                  \n                                                        \n                                                                        CommonService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                is used to update the loggedInUserSubject.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkIsLoggedIn\n                        \n                    \n                \n            \n            \n                \ncheckIsLoggedIn()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/navbar/navbar.component.ts:52\n                \n            \n\n\n            \n                \n                    This method is used to check if the user is logged in or not. And, if user is not logged in, then it will not show the 'Sign out' button, 'Get data' and 'Post data' button on the screen. It would only show the 'Sign in' and 'Sign up' button.\nIt will subscribe to the loggedInUserSubject to get the logged in user's name. It will update the username or log error in the console.\nThis is also use to show the logged in user's name on the screen.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleSignOut\n                        \n                    \n                \n            \n            \n                \nhandleSignOut()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/navbar/navbar.component.ts:43\n                \n            \n\n\n            \n                \n                    This method is used to sign out the logged in user when user clicks on the 'Sign out' button. It will call the handleSignOut method.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/navbar/navbar.component.ts:67\n                \n            \n\n\n            \n                \n                    This is called when the component is destroyed. It will unsubscribe from the subscription if it is present.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/navbar/navbar.component.ts:36\n                \n            \n\n\n            \n                \n                    This method is used to initialize the component. It will check if the user is logged in or not.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        loggedInUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/components/navbar/navbar.component.ts:24\n                        \n                    \n\n            \n                \n                    This is the logged in user's name. It is initialized with an empty string.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/navbar/navbar.component.ts:31\n                        \n                    \n\n            \n                \n                    This is the subscription that would be used in this component. It is initialized with an empty subscription.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { CommonService } from 'src/app/services/common.service';\nimport { Subscription } from 'rxjs';\n\n/**\n * This component is used to show the navigation bar on the screen.\n */\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css'],\n})\nexport class NavbarComponent implements OnInit, OnDestroy {\n  /**\n   * This is the constructor of this component.\n   * @param commonService is used to update the [loggedInUserSubject]{@link CommonService#loggedInUserSubject}.\n   */\n  constructor(private commonService: CommonService) {}\n  /**\n   * This is the logged in user's name. It is initialized with an empty string.\n   * @type {string}\n   * @default ''\n   */\n  loggedInUser: string = '';\n\n  /**\n   * This is the subscription that would be used in this component. It is initialized with an empty subscription.\n   * @type {Subscription}\n   * @private\n   */\n  private subscription!: Subscription;\n\n  /**\n   * This method is used to initialize the component. It will check if the user is logged in or not.\n   */\n  ngOnInit(): void {\n    this.checkIsLoggedIn();\n  }\n\n  /**\n   * This method is used to sign out the logged in user when user clicks on the 'Sign out' button. It will call the [handleSignOut]{@link CommonService#handleSignOut} method.\n   */\n  handleSignOut(): void {\n    this.commonService.signOut();\n  }\n\n  /**\n   * This method is used to check if the user is logged in or not. And, if user is not logged in, then it will not show the 'Sign out' button, 'Get data' and 'Post data' button on the screen. It would only show the 'Sign in' and 'Sign up' button.\n   * It will subscribe to the [loggedInUserSubject]{@link CommonService#loggedInUserSubject} to get the logged in user's name. It will update the username or log error in the console.\n   * This is also use to show the logged in user's name on the screen.\n   */\n  checkIsLoggedIn(): void {\n    this.subscription = this.commonService.loggedInUserSubject.subscribe({\n      next: (loggedInUser: string) => {\n        this.loggedInUser = loggedInUser;\n      },\n      error: (error: any) => {\n        this.loggedInUser = '';\n        this.commonService.logger(error);\n      },\n    });\n  }\n\n  /**\n   * This is called when the component is destroyed. It will unsubscribe from the subscription if it is present.\n   */\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n\n    \n\n    \n        \n   0\" [routerLink]=\"'/'\">{{\n    loggedInUser.length > 0\n      ? \" | \" +\n        loggedInUser.charAt(0).toUpperCase() +\n        loggedInUser.slice(1) +\n        \" | \"\n      : \" | Home | \"\n  }}\n   | Sign in | \n\n   | Sign up | \n\n   0\" [routerLink]=\"'/get-data'\">\n    | Get data |\n  \n\n   0\" [routerLink]=\"'/post-data'\">\n    | Post data |\n  \n\n   0\"\n    style=\"cursor: pointer\"\n    (click)=\"handleSignOut()\"\n  >\n    | Sign out |\n  \n\n\n    \n\n    \n                \n                    ./navbar.component.css\n                \n                nav {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\nnav > * {\n  font-variation-settings: \"wght\" 450, \"wdth\" 180 !important;\n}\n\nnav > a:not(:first-child) {\n  margin-left: 10px;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '   0\" [routerLink]=\"\\'/\\'\">{{    loggedInUser.length > 0      ? \" | \" +        loggedInUser.charAt(0).toUpperCase() +        loggedInUser.slice(1) +        \" | \"      : \" | Home | \"  }}   | Sign in |    | Sign up |    0\" [routerLink]=\"\\'/get-data\\'\">    | Get data |     0\" [routerLink]=\"\\'/post-data\\'\">    | Post data |     0\"    style=\"cursor: pointer\"    (click)=\"handleSignOut()\"  >    | Sign out |  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GetDataComponent', 'selector': 'app-get-data'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PostDataComponent', 'selector': 'app-post-data'},{'name': 'SigninComponent', 'selector': 'app-signin'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'WebSocketComponent', 'selector': 'app-web-socket'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NavbarComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NotificationComponent.html":{"url":"components/NotificationComponent.html","title":"component - NotificationComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NotificationComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/notification/notification.component.ts\n\n\n\n    \n        Description\n    \n    \n        This component is used to show the notification on the screen.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-notification\n            \n\n\n\n            \n                styleUrls\n                ./notification.component.css\n            \n\n\n\n            \n                templateUrl\n                ./notification.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                notification\n                            \n                            \n                                    Private\n                                subscription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(commonService: CommonService)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/notification/notification.component.ts:14\n                            \n                        \n\n                \n                    \n                            This is the constructor of this component.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        commonService\n                                                  \n                                                        \n                                                                        CommonService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                is used to subscribe to the notificationSubject.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/notification/notification.component.ts:55\n                \n            \n\n\n            \n                \n                    This is called when the component is destroyed. It will unsubscribe from the subscription if it is present.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/notification/notification.component.ts:38\n                \n            \n\n\n            \n                \n                    This method is used to initialize the component. It will subscribe to the notificationSubject to get the updated notification to be shown on the screen.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        notification\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/components/notification/notification.component.ts:26\n                        \n                    \n\n            \n                \n                    This is the notification to be shown on the screen. It is initialized with an empty string.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/notification/notification.component.ts:33\n                        \n                    \n\n            \n                \n                    This is the subscription that would be used in this component. It is initialized with an empty subscription.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { CommonService } from 'src/app/services/common.service';\nimport { appConstant } from 'src/constants/app.constant';\n\n/**\n * This component is used to show the notification on the screen.\n */\n@Component({\n  selector: 'app-notification',\n  templateUrl: './notification.component.html',\n  styleUrls: ['./notification.component.css'],\n})\nexport class NotificationComponent implements OnInit, OnDestroy {\n  /**\n   * This is the constructor of this component.\n   * @param commonService is used to subscribe to the [notificationSubject]{@link CommonService#notificationSubject}.\n   */\n  constructor(private commonService: CommonService) {}\n\n  /**\n   * This is the notification to be shown on the screen. It is initialized with an empty string.\n   * @type {string}\n   * @default ''\n   */\n  notification: string = '';\n\n  /**\n   * This is the subscription that would be used in this component. It is initialized with an empty subscription.\n   * @type {Subscription}\n   * @private\n   */\n  private subscription!: Subscription;\n\n  /**\n   * This method is used to initialize the component. It will subscribe to the [notificationSubject]{@link CommonService#notificationSubject} to get the updated notification to be shown on the screen.\n   */\n  ngOnInit(): void {\n    this.subscription = this.commonService.notificationSubject$.subscribe(\n      (notification: any) => {\n        this.notification = notification;\n        /**\n         * This is used to hide the notification after a certain time.\n         */\n        setTimeout(() => {\n          this.notification = '';\n        }, appConstant.hideNotifcationAfter);\n      }\n    );\n  }\n\n  /**\n   * This is called when the component is destroyed. It will unsubscribe from the subscription if it is present.\n   */\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n\n    \n\n    \n        {{ notification }}\n\n    \n\n    \n                \n                    ./notification.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{ notification }}'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GetDataComponent', 'selector': 'app-get-data'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PostDataComponent', 'selector': 'app-post-data'},{'name': 'SigninComponent', 'selector': 'app-signin'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'WebSocketComponent', 'selector': 'app-web-socket'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NotificationComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PostDataComponent.html":{"url":"components/PostDataComponent.html","title":"component - PostDataComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  PostDataComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/post-data/post-data.component.ts\n\n\n\n    \n        Description\n    \n    \n        This component is used to show form to send new data form on the screen to backend.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-post-data\n            \n\n\n\n            \n                styleUrls\n                ./post-data.component.css\n            \n\n\n\n            \n                templateUrl\n                ./post-data.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                article\n                            \n                            \n                                    Private\n                                subscription\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handlePostData\n                            \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(backendService: BackendService, commonService: CommonService)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/post-data/post-data.component.ts:16\n                            \n                        \n\n                \n                    \n                            This is the constructor of this component.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        backendService\n                                                  \n                                                        \n                                                                        BackendService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                is used to make the API call to the backend.\n\n                                                        \n                                                \n                                                \n                                                        commonService\n                                                  \n                                                        \n                                                                        CommonService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                is used to show the notification and loader on the screen.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handlePostData\n                        \n                    \n                \n            \n            \n                \nhandlePostData()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/post-data/post-data.component.ts:54\n                \n            \n\n\n            \n                \n                    This method is used to handle sending data to the backend. It will call the handlePostData method.\nIt will show the loader on the screen while the API call is in progress. After the API call is completed, it will hide the loader. It will show the notification on the screen based on the response from the backend.\nIt subscribes to the handlePostData to sennd the data to the backend. For error, it will show the error message on the screen and log the error in the console.\nIf the user is not logged in or the token is expired, then it will sign out the user.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/post-data/post-data.component.ts:108\n                \n            \n\n\n            \n                \n                    This is called when the component is destroyed. It will unsubscribe from the subscription if it is present.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        article\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/components/post-data/post-data.component.ts:32\n                        \n                    \n\n            \n                \n                    This is the article that is needed to be sent to the backend. It is initialized with an empty string.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/post-data/post-data.component.ts:46\n                        \n                    \n\n            \n                \n                    This is the subscription that would be used in this component. It is initialized with an empty subscription.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/components/post-data/post-data.component.ts:39\n                        \n                    \n\n            \n                \n                    This is the title that is needed to be sent to the backend. It is initialized with an empty string.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnDestroy } from '@angular/core';\nimport { Subscription, finalize } from 'rxjs';\nimport { RequestData } from 'src/app/models/RequestData.model';\nimport { BackendService } from 'src/app/services/backend.service';\nimport { CommonService } from 'src/app/services/common.service';\nimport { appConstant } from 'src/constants/app.constant';\n\n/**\n * This component is used to show form to send new data form on the screen to backend.\n */\n@Component({\n  selector: 'app-post-data',\n  templateUrl: './post-data.component.html',\n  styleUrls: ['./post-data.component.css'],\n})\nexport class PostDataComponent implements OnDestroy {\n  /**\n   * This is the constructor of this component.\n   * @param backendService is used to make the API call to the backend.\n   * @param commonService is used to show the notification and loader on the screen.\n   */\n  constructor(\n    private backendService: BackendService,\n    private commonService: CommonService\n  ) {}\n\n  /**\n   * This is the article that is needed to be sent to the backend. It is initialized with an empty string.\n   * @type {string}\n   * @default ''\n   */\n  article: string = '';\n\n  /**\n   * This is the title that is needed to be sent to the backend. It is initialized with an empty string.\n   * @type {string}\n   * @default ''\n   */\n  title: string = '';\n\n  /**\n   * This is the subscription that would be used in this component. It is initialized with an empty subscription.\n   * @type {Subscription}\n   * @private\n   */\n  private subscription!: Subscription;\n\n  /**\n   * This method is used to handle sending data to the backend. It will call the [handlePostData]{@link BackendService#handlePostData} method.\n   * It will show the loader on the screen while the API call is in progress. After the API call is completed, it will hide the loader. It will show the notification on the screen based on the response from the backend.\n   * It subscribes to the [handlePostData]{@link BackendService#handlePostData} to sennd the data to the backend. For error, it will show the error message on the screen and log the error in the console.\n   * If the user is not logged in or the token is expired, then it will sign out the user.\n   */\n  handlePostData() {\n    /**\n     * This is the data to be sent to the backend.\n     * @type {RequestData}\n     */\n    const data: RequestData = {\n      title: this.title,\n      article: this.article,\n    };\n    this.commonService.updateLoaderSubject(true);\n    this.subscription = this.backendService\n      .handlePostData(data)\n      .pipe(\n        finalize(() => {\n          this.commonService.updateLoaderSubject(false);\n        })\n      )\n      .subscribe({\n        next: (response: any) => {\n          this.commonService.logger(response);\n          this.commonService.updateNotificationSubject(\n            response?.message ||\n              `${appConstant.success} ${appConstant.postData}.`\n          );\n        },\n        error: (error: any) => {\n          this.commonService.logger(error);\n\n          /**\n           * If the user is not logged in or the token is expired, then it will sign out the user, and user is notified with the error message.\n           */\n          if (error?.status === 401) {\n            this.commonService.updateNotificationSubject(\n              `${appConstant.error} ${appConstant.signInAgain}.`\n            );\n            this.commonService.signOut();\n            return;\n          }\n\n          this.commonService.updateNotificationSubject(\n            error.error?.message ||\n              `${appConstant.error} ${appConstant.postData}.`\n          );\n\n          if (error?.status === 401) {\n            this.commonService.signOut();\n          }\n        },\n      });\n  }\n\n  /**\n   * This is called when the component is destroyed. It will unsubscribe from the subscription if it is present.\n   */\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n    \n    \n      \n      \n    \n  \n  Post data\n\n\n    \n\n    \n                \n                    ./post-data.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                        Post data'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GetDataComponent', 'selector': 'app-get-data'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PostDataComponent', 'selector': 'app-post-data'},{'name': 'SigninComponent', 'selector': 'app-signin'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'WebSocketComponent', 'selector': 'app-web-socket'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'PostDataComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestData.html":{"url":"interfaces/RequestData.html","title":"interface - RequestData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/RequestData.model.ts\n        \n\n\n            \n                Description\n            \n            \n                This is the interface for the data.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            article\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        article\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        article:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    This is the article provided by the user.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    This is the title provided by the user.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface RequestData {\n  /**\n   * This is the title provided by the user.\n   */\n  title: string;\n  /**\n   * This is the article provided by the user.\n   */\n  article: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResponseData.html":{"url":"interfaces/ResponseData.html","title":"interface - ResponseData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ResponseData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/ResponseData.model.ts\n        \n\n\n            \n                Description\n            \n            \n                This is the interface for the response data that comes from the backend.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            article\n                                        \n                                \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        article\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        article:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    This is the article that comes from the backend.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    This is the created date that comes from the backend.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    This is the title that comes from the backend.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    This is the username that comes from the backend.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ResponseData {\n  /**\n   * This is the username that comes from the backend.\n   */\n  username: string;\n  /**\n   * This is the title that comes from the backend.\n   */\n  title: string;\n  /**\n   * This is the article that comes from the backend.\n   */\n  article: string;\n  /**\n   * This is the created date that comes from the backend.\n   */\n  createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SignIn.html":{"url":"interfaces/SignIn.html","title":"interface - SignIn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SignIn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/SignIn.model.ts\n        \n\n\n            \n                Description\n            \n            \n                This is the interface for the sign in data.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    This is the password of the user.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    This is the username of the user.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface SignIn {\n  /**\n   * This is the username of the user.\n   */\n  username: string;\n  /**\n   * This is the password of the user.\n   */\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SignUp.html":{"url":"interfaces/SignUp.html","title":"interface - SignUp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SignUp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/SignUp.model.ts\n        \n\n\n            \n                Description\n            \n            \n                This is the interface for the sign up data.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:     string | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    This is the email of the user. It is optional.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    This is the password of the user.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    This is the username of the user.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface SignUp {\n  /**\n   * This is the email of the user. It is optional.\n   * @optional\n   */\n  email?: string | undefined;\n  /**\n   * This is the username of the user.\n   */\n  username: string;\n  /**\n   * This is the password of the user.\n   */\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SigninComponent.html":{"url":"components/SigninComponent.html","title":"component - SigninComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SigninComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/signin/signin.component.ts\n\n\n\n    \n        Description\n    \n    \n        This component is used to show the sign in page on the screen. It is used to sign in the existing users.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-signin\n            \n\n\n\n            \n                styleUrls\n                ./signin.component.css\n            \n\n\n\n            \n                templateUrl\n                ./signin.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                    Private\n                                subscription\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleSignIn\n                            \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(backendService: BackendService, commonService: CommonService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/signin/signin.component.ts:17\n                            \n                        \n\n                \n                    \n                            This is the constructor of this component.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        backendService\n                                                  \n                                                        \n                                                                        BackendService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                is used to make the API call to the backend.\n\n                                                        \n                                                \n                                                \n                                                        commonService\n                                                  \n                                                        \n                                                                        CommonService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                is used to show the notification and loader on the screen.\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                is used here to navigate the user to get data screen after successful sign in.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleSignIn\n                        \n                    \n                \n            \n            \n                \nhandleSignIn()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/signin/signin.component.ts:58\n                \n            \n\n\n            \n                \n                    This method is used to sign in the existing user. It will call the handleSignIn method.\nIt will show the loader on the screen while the API call is in progress. After the API call is completed, it will hide the loader. It will show the notification on the screen based on the response from the backend.\nIt subscribes to the handleSignIn to get the data from the backend. It will update the token and username with the data received from the backend.\nFor error, it will show the error message on the screen and log the error in the console.\nAfter successful sign in, it will navigate the user to the get data screen.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/signin/signin.component.ts:104\n                \n            \n\n\n            \n                \n                    This is called when the component is destroyed. It will unsubscribe from the subscription if it is present.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/components/signin/signin.component.ts:42\n                        \n                    \n\n            \n                \n                    This is the password of the user. It is initialized with an empty string.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/signin/signin.component.ts:49\n                        \n                    \n\n            \n                \n                    This is the subscription that would be used in this component. It is initialized with an empty subscription.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/components/signin/signin.component.ts:35\n                        \n                    \n\n            \n                \n                    This is the username of the user. It is initialized with an empty string.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnDestroy } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Subscription, finalize } from 'rxjs';\nimport { SignIn } from 'src/app/models/SignIn.model';\nimport { BackendService } from 'src/app/services/backend.service';\nimport { CommonService } from 'src/app/services/common.service';\nimport { appConstant } from 'src/constants/app.constant';\n\n/**\n * This component is used to show the sign in page on the screen. It is used to sign in the existing users.\n */\n@Component({\n  selector: 'app-signin',\n  templateUrl: './signin.component.html',\n  styleUrls: ['./signin.component.css'],\n})\nexport class SigninComponent implements OnDestroy {\n  /**\n   * This is the constructor of this component.\n   * @param backendService is used to make the API call to the backend.\n   * @param commonService is used to show the notification and loader on the screen.\n   * @param router is used here to navigate the user to get data screen after successful sign in.\n   */\n  constructor(\n    private backendService: BackendService,\n    private commonService: CommonService,\n    private router: Router\n  ) {}\n\n  /**\n   * This is the username of the user. It is initialized with an empty string.\n   * @type {string}\n   * @default ''\n   */\n  username: string = '';\n\n  /**\n   * This is the password of the user. It is initialized with an empty string.\n   * @type {string}\n   * @default ''\n   */\n  password: string = '';\n\n  /**\n   * This is the subscription that would be used in this component. It is initialized with an empty subscription.\n   * @type {Subscription}\n   * @private\n   */\n  private subscription!: Subscription;\n\n  /**\n   * This method is used to sign in the existing user. It will call the [handleSignIn]{@link BackendService#handleSignIn} method.\n   * It will show the loader on the screen while the API call is in progress. After the API call is completed, it will hide the loader. It will show the notification on the screen based on the response from the backend.\n   * It subscribes to the [handleSignIn]{@link BackendService#handleSignIn} to get the data from the backend. It will update the [token]{@link CommonService#token} and [username]{@link CommonService#username} with the data received from the backend.\n   * For error, it will show the error message on the screen and log the error in the console.\n   * After successful sign in, it will navigate the user to the get data screen.\n   */\n  handleSignIn() {\n    /**\n     * Creating the data to be sent to the backend.\n     * @type {SignIn}\n     */\n    const data: SignIn = {\n      username: this.username,\n      password: this.password,\n    };\n    this.commonService.updateLoaderSubject(true);\n    this.subscription = this.backendService\n      .handleSignIn(data)\n      .pipe(\n        finalize(() => {\n          this.commonService.updateLoaderSubject(false);\n        })\n      )\n      .subscribe({\n        next: (response: any) => {\n          const accessToken: string = response.headers.get(\n            appConstant.authorizationHeaderKey\n          );\n          this.commonService.token = accessToken;\n          const decodedToken = this.commonService.decodeToken(accessToken);\n          this.commonService.logger(decodedToken);\n          this.commonService.username = decodedToken?.username;\n          this.router.navigate(['/get-data']);\n\n          this.commonService.updateNotificationSubject(\n            response?.body?.message ||\n              `${appConstant.success} ${appConstant.signIn}.`\n          );\n        },\n        error: (error: any) => {\n          this.commonService.logger(error);\n          this.commonService.updateNotificationSubject(\n            error.error?.message ||\n              `${appConstant.error} ${appConstant.signIn}.`\n          );\n        },\n      });\n  }\n\n  /**\n   * This is called when the component is destroyed. It will unsubscribe from the subscription if it is present.\n   */\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n    \n    \n      \n    \n  \n  Sign in\n\n\n    \n\n    \n                \n                    ./signin.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                  Sign in'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GetDataComponent', 'selector': 'app-get-data'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PostDataComponent', 'selector': 'app-post-data'},{'name': 'SigninComponent', 'selector': 'app-signin'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'WebSocketComponent', 'selector': 'app-web-socket'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SigninComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SignupComponent.html":{"url":"components/SignupComponent.html","title":"component - SignupComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SignupComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/signup/signup.component.ts\n\n\n\n    \n        Description\n    \n    \n        This component is used to show the sign up page on the screen. It is used to create a new user.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-signup\n            \n\n\n\n            \n                styleUrls\n                ./signup.component.css\n            \n\n\n\n            \n                templateUrl\n                ./signup.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                            \n                                    Private\n                                subscription\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleSignUp\n                            \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(backendService: BackendService, commonService: CommonService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/signup/signup.component.ts:17\n                            \n                        \n\n                \n                    \n                            This is the constructor of this component.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        backendService\n                                                  \n                                                        \n                                                                        BackendService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                is used to make the API call to the backend.\n\n                                                        \n                                                \n                                                \n                                                        commonService\n                                                  \n                                                        \n                                                                        CommonService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                is used to show the notification and loader on the screen.\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                is used here to navigate the user to the post data screen after successful sign up.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleSignUp\n                        \n                    \n                \n            \n            \n                \nhandleSignUp()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/signup/signup.component.ts:66\n                \n            \n\n\n            \n                \n                    This method is used to handle the sign up button click. It will call the handleSignUp method.\nIt will show the loader on the screen while the API call is in progress. After the API call is completed, it will hide the loader. It will show the notification on the screen based on the response from the backend.\nIt subscribes to the handleSignUp to sign up the user. It will update the token and username in the commonService based on the response from the backend.\nFor error, it will show the error message on the screen and log the error in the console.\nAfter successful sign up, it will navigate the user to the post data screen.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/signup/signup.component.ts:109\n                \n            \n\n\n            \n                \n                    This is called when the component is destroyed. It will unsubscribe from the subscription if it is present.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/components/signup/signup.component.ts:50\n                        \n                    \n\n            \n                \n                    This is the email of the user. It is initialized with an empty string. It is optional.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/components/signup/signup.component.ts:42\n                        \n                    \n\n            \n                \n                    This is the password of the user. It is initialized with an empty string.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/signup/signup.component.ts:57\n                        \n                    \n\n            \n                \n                    This is the subscription that would be used in this component. It is initialized with an empty subscription.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/components/signup/signup.component.ts:35\n                        \n                    \n\n            \n                \n                    This is the username of the user. It is initialized with an empty string.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnDestroy } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Subscription, finalize } from 'rxjs';\nimport { SignUp } from 'src/app/models/SignUp.model';\nimport { BackendService } from 'src/app/services/backend.service';\nimport { CommonService } from 'src/app/services/common.service';\nimport { appConstant } from 'src/constants/app.constant';\n\n/**\n * This component is used to show the sign up page on the screen. It is used to create a new user.\n */\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css'],\n})\nexport class SignupComponent implements OnDestroy {\n  /**\n   * This is the constructor of this component.\n   * @param backendService is used to make the API call to the backend.\n   * @param commonService is used to show the notification and loader on the screen.\n   * @param router is used here to navigate the user to the post data screen after successful sign up.\n   */\n  constructor(\n    private backendService: BackendService,\n    private commonService: CommonService,\n    private router: Router\n  ) {}\n\n  /**\n   * This is the username of the user. It is initialized with an empty string.\n   * @type {string}\n   * @default ''\n   */\n  username: string = '';\n\n  /**\n   * This is the password of the user. It is initialized with an empty string.\n   * @type {string}\n   * @default ''\n   */\n  password: string = '';\n\n  /**\n   * This is the email of the user. It is initialized with an empty string. It is optional.\n   * @optional\n   * @type {string}\n   * @default ''\n   */\n  email: string = '';\n\n  /**\n   * This is the subscription that would be used in this component. It is initialized with an empty subscription.\n   * @type {Subscription}\n   * @private\n   */\n  private subscription!: Subscription;\n\n  /**\n   * This method is used to handle the sign up button click. It will call the [handleSignUp]{@link BackendService#handleSignUp} method.\n   * It will show the loader on the screen while the API call is in progress. After the API call is completed, it will hide the loader. It will show the notification on the screen based on the response from the backend.\n   * It subscribes to the [handleSignUp]{@link BackendService#handleSignUp} to sign up the user. It will update the [token]{@link CommonService#token} and [username]{@link CommonService#username} in the [commonService]{@link CommonService} based on the response from the backend.\n   * For error, it will show the error message on the screen and log the error in the console.\n   * After successful sign up, it will navigate the user to the post data screen.\n   */\n  handleSignUp() {\n    /**\n     * Creating the data object to be sent to the backend.\n     * @type {SignUp}\n     */\n    const data: SignUp = {\n      username: this.username,\n      password: this.password,\n      email: this.email ? this.email : undefined,\n    };\n    this.commonService.updateLoaderSubject(true);\n    this.subscription = this.backendService\n      .handleSignUp(data)\n      .pipe(\n        finalize(() => {\n          this.commonService.updateLoaderSubject(false);\n        })\n      )\n      .subscribe({\n        next: (response: any) => {\n          const accessToken: string = response.headers.get('Authorization');\n          this.commonService.token = accessToken;\n          const decodedToken = this.commonService.decodeToken(accessToken);\n          this.commonService.username = decodedToken?.username;\n          this.router.navigate(['/post-data']);\n\n          this.commonService.updateNotificationSubject(\n            response?.message || `${appConstant.success} ${appConstant.signUp}.`\n          );\n        },\n        error: (error: any) => {\n          this.commonService.logger(error);\n          this.commonService.updateNotificationSubject(\n            error.error?.message ||\n              `${appConstant.error} ${appConstant.signUp}.`\n          );\n        },\n      });\n  }\n\n  /**\n   * This is called when the component is destroyed. It will unsubscribe from the subscription if it is present.\n   */\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n    \n    \n      \n    \n    \n      \n    \n  \n  Sign up\n\n\n    \n\n    \n                \n                    ./signup.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                Sign up'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GetDataComponent', 'selector': 'app-get-data'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PostDataComponent', 'selector': 'app-post-data'},{'name': 'SigninComponent', 'selector': 'app-signin'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'WebSocketComponent', 'selector': 'app-web-socket'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SignupComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/WebSocketComponent.html":{"url":"components/WebSocketComponent.html","title":"component - WebSocketComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  WebSocketComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/web-socket/web-socket.component.ts\n\n\n\n    \n        Description\n    \n    \n        This component is used to show the message from the connected websocket.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-web-socket\n            \n\n\n\n            \n                styleUrls\n                ./web-socket.component.css\n            \n\n\n\n            \n                templateUrl\n                ./web-socket.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                message\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(backendService: BackendService)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/web-socket/web-socket.component.ts:11\n                            \n                        \n\n                \n                    \n                            This is the constructor of this component.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        backendService\n                                                  \n                                                        \n                                                                        BackendService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                is used to make the API call to the backend.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/web-socket/web-socket.component.ts:30\n                \n            \n\n\n            \n                \n                    This method is used to initialize the component. It will connect to the websocket.\nIt will subscribe to the handleGetWebSocketData to get the message from the websocket. It will update the message with the data received from the websocket.\nFor error, it will log the error in the console.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/components/web-socket/web-socket.component.ts:23\n                        \n                    \n\n            \n                \n                    This is the message from the connected websocket. It is initialized with an empty string.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { BackendService } from 'src/app/services/backend.service';\n/**\n * This component is used to show the message from the connected websocket.\n */\n@Component({\n  selector: 'app-web-socket',\n  templateUrl: './web-socket.component.html',\n  styleUrls: ['./web-socket.component.css'],\n})\nexport class WebSocketComponent implements OnInit {\n  /**\n   * This is the constructor of this component.\n   * @param backendService is used to make the API call to the backend.\n   */\n  constructor(private backendService: BackendService) {}\n\n  /**\n   * This is the message from the connected websocket. It is initialized with an empty string.\n   * @type {string}\n   * @default ''\n   */\n  message: string = '';\n\n  /**\n   * This method is used to initialize the component. It will connect to the websocket.\n   * It will subscribe to the [handleGetWebSocketData]{@link BackendService#handleGetWebSocketData} to get the message from the websocket. It will update the [message]{@link message} with the data received from the websocket.\n   * For error, it will log the error in the console.\n   */\n  ngOnInit(): void {}\n}\n\n    \n\n    \n        {{ message }}\n\n    \n\n    \n                \n                    ./web-socket.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{ message }}'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GetDataComponent', 'selector': 'app-get-data'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PostDataComponent', 'selector': 'app-post-data'},{'name': 'SigninComponent', 'selector': 'app-signin'},{'name': 'SignupComponent', 'selector': 'app-signup'},{'name': 'WebSocketComponent', 'selector': 'app-web-socket'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'WebSocketComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/components/get-data/get-data.component.ts\n            \n            component\n            GetDataComponent\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/app/components/navbar/navbar.component.ts\n            \n            component\n            NavbarComponent\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/app/components/notification/notification.component.ts\n            \n            component\n            NotificationComponent\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/components/post-data/post-data.component.ts\n            \n            component\n            PostDataComponent\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/app/components/signin/signin.component.ts\n            \n            component\n            SigninComponent\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/app/components/signup/signup.component.ts\n            \n            component\n            SignupComponent\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/app/components/web-socket/web-socket.component.ts\n            \n            component\n            WebSocketComponent\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/models/DecodedJWT.model.ts\n            \n            interface\n            DecodedJWT\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/models/RequestData.model.ts\n            \n            interface\n            RequestData\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/models/ResponseData.model.ts\n            \n            interface\n            ResponseData\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/models/SignIn.model.ts\n            \n            interface\n            SignIn\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/models/SignUp.model.ts\n            \n            interface\n            SignUp\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/services/auth.guard.ts\n            \n            injectable\n            AuthGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/services/backend.interceptor.ts\n            \n            interceptor\n            BackendInterceptor\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/services/backend.service.ts\n            \n            injectable\n            BackendService\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                src/app/services/common.service.ts\n            \n            injectable\n            CommonService\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                src/constants/apiPath.constant.ts\n            \n            variable\n            apiPathConstant\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/constants/app.constant.ts\n            \n            variable\n            appConstant\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/environments/environment.development.ts\n            \n            variable\n            environment\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/environments/environment.production.ts\n            \n            variable\n            environment\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/environments/environment.ts\n            \n            variable\n            environment\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^16.0.0\n        \n            @angular/common : ^16.0.0\n        \n            @angular/compiler : ^16.0.0\n        \n            @angular/core : ^16.0.0\n        \n            @angular/forms : ^16.0.0\n        \n            @angular/platform-browser : ^16.0.0\n        \n            @angular/platform-browser-dynamic : ^16.0.0\n        \n            @angular/router : ^16.0.0\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.13.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nBase Frontend v0.0.1\n\n\nIntroduction\nThis project was generated with Angular CLI version 16.0.2.\nThis application serves as the frontend for base-node-server application.\nThis is a very basic single page web application created to test out the base-node-server in the browser. It has been documented, but I always strive to do better.\nRunning the application\nRun ng serve or npm run development for development server. Run npm run production for production server. Navigate to http://localhost:4200/. The application will automatically reload if you change any of the source files.\nDocumentation for the application\nRun npm run compdoc for generating documentation. Navigate to http://127.0.0.1:5500/frontend/documentation/index.html for the documentation.\nBuilding the application (for production)\nRun npm build for generating production build files. Navigate to dist folder to see the files.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nGetDataComponent\n\nGetDataComponent\n\nAppModule -->\n\nGetDataComponent->AppModule\n\n\n\n\n\nNavbarComponent\n\nNavbarComponent\n\nAppModule -->\n\nNavbarComponent->AppModule\n\n\n\n\n\nNotificationComponent\n\nNotificationComponent\n\nAppModule -->\n\nNotificationComponent->AppModule\n\n\n\n\n\nPostDataComponent\n\nPostDataComponent\n\nAppModule -->\n\nPostDataComponent->AppModule\n\n\n\n\n\nSigninComponent\n\nSigninComponent\n\nAppModule -->\n\nSigninComponent->AppModule\n\n\n\n\n\nSignupComponent\n\nSignupComponent\n\nAppModule -->\n\nSignupComponent->AppModule\n\n\n\n\n\nWebSocketComponent\n\nWebSocketComponent\n\nAppModule -->\n\nWebSocketComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nAuthGuard\n\nAuthGuard\n\nAppModule -->\n\nAuthGuard->AppModule\n\n\n\n\n\nBackendInterceptor\n\nBackendInterceptor\n\nAppModule -->\n\nBackendInterceptor->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Components\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        5 Routes\n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            apiPathConstant   (src/.../apiPath.constant.ts)\n                        \n                        \n                            appConstant   (src/.../app.constant.ts)\n                        \n                        \n                            environment   (src/.../environment.development.ts)\n                        \n                        \n                            environment   (src/.../environment.production.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/constants/apiPath.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        apiPathConstant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  signUp: '/signup',\n  signIn: '/signin',\n  signOut: '/signout',\n  data: '/data',\n  websocket: '/websocket',\n}\n                    \n                \n\n            \n                \n                    These are the API path constants.\n\n                \n            \n\n        \n    \n\n    src/constants/app.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConstant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  appName: 'Angular App',\n  hideNotifcationAfter: 5000,\n  authorizationHeaderKey: 'Authorization',\n  success: 'Success',\n  error: 'Error',\n  signUp: '- signing up',\n  signIn: '- signing in',\n  signOut: '- signing out',\n  getData: '- getting data',\n  postData: '- posting data',\n  signInAgain: '- sign in again',\n}\n                    \n                \n\n            \n                \n                    These are the common app constants.\n\n                \n            \n\n        \n    \n\n    src/environments/environment.development.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  backendUrl: 'http://localhost:3000/api',\n  websocketUrl: 'ws://localhost:8080',\n  production: false,\n}\n                    \n                \n\n            \n                \n                    This is the environment file for the development environment.\n\n                \n            \n\n        \n    \n\n    src/environments/environment.production.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  backendUrl: 'http://:3000/api',\n  websocketUrl: 'ws://:3000',\n  production: true,\n}\n                    \n                \n\n            \n                \n                    This is the environment file for the production environment.\n\n                \n            \n\n        \n    \n\n    src/environments/environment.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  backendUrl: '',\n  websocketUrl: '',\n  production: false,\n}\n                    \n                \n\n            \n                \n                    This is the environment file for the default environment.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
